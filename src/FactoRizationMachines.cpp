#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export]]
List trainFM(List j10710k) { int j15079k=(j10710k["iIter"]); double j13539k=(j10710k["dStdev"]); std::vector<int> j10286k = as< std::vector<int> >(j10710k["vK"]); bool j13607k=(j10710k["bIntercept"]); std::vector<double> j14116k = as< std::vector<double> >(j10710k["vLambda"]); NumericMatrix j12503k = as< NumericMatrix >(j10710k["mX"]); std::vector<double> j16424k = as< std::vector<double> >(j10710k["vY"]); if(j10286k.size()<10) j10286k.resize(10,0); int *j15138k; double* j12131k; double* j10678k; double* j19495k; double* j18736k; std::vector<double>* j16090k; double j18770k, j15788k, j19427k; int j15083k; int j13444k=j10286k.size(); std::vector<double> j11904k(j12503k.nrow()); std::vector< std::vector<double> > j17546k(j13444k); std::vector< std::vector<double> > j11830k(j13444k); for(int j11808k=0;j11808k<j13444k;j11808k++){ j17546k[j11808k].resize(j10286k[j11808k]); j11830k[j11808k].resize(j10286k[j11808k]); } for(unsigned int j11808k=0;j11808k<j17546k.size();j11808k++){ for(unsigned int j14583k=0;j14583k<j17546k[j11808k].size();j14583k++){ j17546k[j11808k][j14583k]=0.0; j11830k[j11808k][j14583k]=0.0; } } double j16591k, j10678k2, j12131k2, j16455k, j14703k, j17619k, j17855k; int j12773k=0; int j19505k=0; for(int j13117k = 0; j13117k < j12503k.nrow(); j13117k++ ){ if(j12773k<j12503k(j13117k,0)) j12773k=j12503k(j13117k,0); if(j19505k<j12503k(j13117k,1)) j19505k=j12503k(j13117k,1); } j12773k++; j19505k++; std::vector< std::vector<int> >j19465k(j19505k); std::vector< std::vector<double> >j18645k(j19505k); for(int j13117k = 0; j13117k < j12503k.nrow(); j13117k++ ){ j19465k[j12503k(j13117k,1)].push_back(j12503k(j13117k,0)); j18645k[j12503k(j13117k,1)].push_back(j12503k(j13117k,2)); } double j18296k=*(std::min_element(j16424k.begin(),j16424k.end())); double j10500k=*(std::max_element(j16424k.begin(),j16424k.end())); j18770k=0; for(int j17239k=0;j17239k<j13444k;j17239k++) j18770k+=j10286k[j17239k]; std::vector<double> j13186k(j18770k*j19505k+1,0); std::vector<double> j14292k(j13186k.size(),0); for(unsigned int j11808k=0;j11808k<j13186k.size();j11808k++){ j17619k=0; j17855k=j13539k; do { do { j16591k = R::runif(0,1); } while (j16591k == 0.0); j10678k2 = 1.7156 * (R::runif(0,1) - 0.5); j12131k2 = j16591k - 0.449871; j16455k = std::abs(j10678k2) + 0.386595; j14703k = j12131k2*j12131k2 + j16455k*(0.19600*j16455k-0.25472*j12131k2); if (j14703k < 0.27597) { break; } } while ((j14703k > 0.27846) || ((j10678k2*j10678k2) > (-4.0*j16591k*j16591k*std::log(j16591k)))); j13186k[j11808k]=j17619k+(j17855k*(j10678k2/j16591k)); } std::vector< std::vector< std::vector< std::vector<double> > > > j17518k; j17518k.resize(j13444k); for(int j11808k = 0; j11808k < j13444k; j11808k++ ) { j17518k[j11808k].resize(j10286k[j11808k]); for(int j14583k = 0; j14583k < j10286k[j11808k]; j14583k++ ) { j17518k[j11808k][j14583k].resize(j12773k); for(int j19766k = 0; j19766k < j12773k; j19766k++ ){ j17518k[j11808k][j14583k][j19766k].resize(j11808k+1); for(int j17234k = 0; j17234k < j11808k+1; j17234k++ ) j17518k[j11808k][j14583k][j19766k][j17234k]=0; } } } for(unsigned int j11808k = 0; j11808k < j17518k.size(); j11808k++ ) { for(unsigned int j14583k = 0; j14583k < j17518k[j11808k].size(); j14583k++ ) { for(unsigned int j19766k = 0; j19766k < j17518k[j11808k][j14583k].size(); j19766k++ ){ for(unsigned int j17234k = 0; j17234k < j17518k[j11808k][j14583k][j19766k].size(); j17234k++ ) j17518k[j11808k][j14583k][j19766k][j17234k]=0; } } } j15083k=0; for(int j17239k = 0; j17239k < j13444k; j17239k++ ) { for( int j10016k = 0; j10016k < j10286k[j17239k]; j10016k++ ) { for( int j14606k = 0; j14606k < j19505k; j14606k++ ) { j15083k++; j10678k=&j13186k[j15083k]; for( unsigned int j13117k = 0; j13117k < j19465k[j14606k].size(); j13117k++ ) { j15138k=&j19465k[j14606k][j13117k]; j12131k=&j18645k[j14606k][j13117k]; j16090k=&j17518k[j17239k][j10016k][*j15138k]; for( unsigned int j19863k = 1; j19863k <= (*j16090k).size(); j19863k++ ) { (*j16090k)[j19863k-1]+=pow(*j12131k,(double) j19863k)*pow(*j10678k,(double) j19863k); } } } } } std::vector< std::vector<double> >* j18302k; std::vector<double> j17261k(j12773k,j13186k[0]); for(int j17239k = 0; j17239k < j13444k; j17239k++ ) { for( int j10016k = 0; j10016k < j10286k[j17239k]; j10016k++ ) { j18302k=&j17518k[j17239k][j10016k]; if(j17239k==0) for(unsigned int j13117k = 0; j13117k < (*j18302k).size(); j13117k++ ) j17261k[j13117k]+=(*j18302k)[j13117k][0]; if(j17239k==1) for(unsigned int j13117k = 0; j13117k < (*j18302k).size(); j13117k++ ) j17261k[j13117k]+=(1.0/2.0)*((1.0*pow((*j18302k)[j13117k][0],2.0))+(-1.0*pow((*j18302k)[j13117k][1],1.0))); if(j17239k==2) for(unsigned int j13117k = 0; j13117k < (*j18302k).size(); j13117k++ ) j17261k[j13117k]+=(1.0/6.0)*((1.0*pow((*j18302k)[j13117k][0],3.0))+(-3.0*pow((*j18302k)[j13117k][1],1.0)*pow((*j18302k)[j13117k][0],1.0))+(2.0*pow((*j18302k)[j13117k][2],1.0))); } } std::vector<double> j12789k(j12773k,0); for(int j13117k=0;j13117k<j12773k;j13117k++) j12789k[j13117k]=j17261k[j13117k]-j16424k[j13117k]; for(int j16792k=0; j16792k<j15079k; j16792k++){ if(j13607k){ j19427k=0.0; for( unsigned int j13117k=0; j13117k<j12789k.size(); j13117k++ ) j19427k+=(j12789k[j13117k]-j13186k[0]); j19427k/=(-double(j12789k.size())); if(j19427k!=j19427k) j19427k=0; for( unsigned int j13117k=0; j13117k<j12789k.size(); j13117k++ ) j12789k[j13117k]+=(j19427k-j13186k[0]); j13186k[0]=j19427k; } j15083k=0; j18736k=&j14116k[0]; for( int j10016k = 0; j10016k < j10286k[0]; j10016k++ ) { for( int j14606k = 0; j14606k < j19505k; j14606k++ ) { j15083k++; j10678k=&j13186k[j15083k]; j18770k=0; j15788k=0; for( unsigned int j13117k = 0; j13117k < j19465k[j14606k].size(); j13117k++ ) { j15138k=&j19465k[j14606k][j13117k]; j12131k=&j18645k[j14606k][j13117k]; j16090k=&j17518k[0][j10016k][*j15138k]; j19495k=&j12789k[*j15138k]; j11904k[j13117k]=(*j12131k); j18770k+=(((*j19495k)-((*j10678k)*j11904k[j13117k]))*j11904k[j13117k]); j15788k+=pow(j11904k[j13117k],2.0)+(*j18736k); } j19427k=(-j18770k/j15788k); if(std::isinf(j19427k) || std::isnan(j19427k)) j19427k=0; for( unsigned int j13117k = 0; j13117k < j19465k[j14606k].size(); j13117k++ ) { j15138k=&j19465k[j14606k][j13117k]; j12131k=&j18645k[j14606k][j13117k]; j16090k=&j17518k[0][j10016k][*j15138k]; j19495k=&j12789k[*j15138k]; (*j19495k)+=(j19427k-(*j10678k))*j11904k[j13117k]; } (*j10678k)=j19427k; } } j18736k=&j14116k[1]; for( int j10016k = 0; j10016k < j10286k[1]; j10016k++ ) { for( int j14606k = 0; j14606k < j19505k; j14606k++ ) { j15083k++; j10678k=&j13186k[j15083k]; j18770k=0; j15788k=0; for( unsigned int j13117k = 0; j13117k < j19465k[j14606k].size(); j13117k++ ) { j15138k=&j19465k[j14606k][j13117k]; j12131k=&j18645k[j14606k][j13117k]; j16090k=&j17518k[1][j10016k][*j15138k]; j19495k=&j12789k[*j15138k]; j11904k[j13117k]=(*j12131k)*((1.0*pow((*j16090k)[0],1.0))+(-1.0*(*j12131k)*(*j10678k))); j18770k+=(((*j19495k)-((*j10678k)*j11904k[j13117k]))*j11904k[j13117k]); j15788k+=pow(j11904k[j13117k],2.0)+(*j18736k); } j19427k=(-j18770k/j15788k); if(std::isinf(j19427k) || std::isnan(j19427k)) j19427k=0; for( unsigned int j13117k = 0; j13117k < j19465k[j14606k].size(); j13117k++ ) { j15138k=&j19465k[j14606k][j13117k]; j12131k=&j18645k[j14606k][j13117k]; j16090k=&j17518k[1][j10016k][*j15138k]; j19495k=&j12789k[*j15138k]; (*j19495k)+=(j19427k-(*j10678k))*j11904k[j13117k]; (*j16090k)[0]+=(pow(j19427k,1.0)-pow(*j10678k,1.0))*pow(*j12131k,1.0); } (*j10678k)=j19427k; } } j18736k=&j14116k[2]; for( int j10016k = 0; j10016k < j10286k[2]; j10016k++ ) { for( int j14606k = 0; j14606k < j19505k; j14606k++ ) { j15083k++; j10678k=&j13186k[j15083k]; j18770k=0; j15788k=0; for( unsigned int j13117k = 0; j13117k < j19465k[j14606k].size(); j13117k++ ) { j15138k=&j19465k[j14606k][j13117k]; j12131k=&j18645k[j14606k][j13117k]; j16090k=&j17518k[2][j10016k][*j15138k]; j19495k=&j12789k[*j15138k]; j11904k[j13117k]=(*j12131k)*((0.5*pow((*j16090k)[0],2.0))+((-0.5*pow((*j16090k)[1],1.0))+(-1.0*(*j12131k)*(*j10678k)*(*j16090k)[0])+(1.0*pow((*j12131k)*(*j10678k),2.0)))); j18770k+=(((*j19495k)-((*j10678k)*j11904k[j13117k]))*j11904k[j13117k]); j15788k+=pow(j11904k[j13117k],2.0)+(*j18736k); } j19427k=(-j18770k/j15788k); if(std::isinf(j19427k) || std::isnan(j19427k)) j19427k=0; for( unsigned int j13117k = 0; j13117k < j19465k[j14606k].size(); j13117k++ ) { j15138k=&j19465k[j14606k][j13117k]; j12131k=&j18645k[j14606k][j13117k]; j16090k=&j17518k[2][j10016k][*j15138k]; j19495k=&j12789k[*j15138k]; (*j19495k)+=(j19427k-(*j10678k))*j11904k[j13117k]; (*j16090k)[0]+=(pow(j19427k,1.0)-pow(*j10678k,1.0))*pow(*j12131k,1.0); (*j16090k)[1]+=(pow(j19427k,2.0)-pow(*j10678k,2.0))*pow(*j12131k,2.0); } (*j10678k)=j19427k; } } } for(unsigned int j11808k=j10286k.size()-1;j11808k>0;j11808k--) if(j10286k[j11808k]==0) j10286k.resize(j11808k); else break; List j16348k=Rcpp::List::create(Rcpp::Named("weights") = j13186k, Rcpp::Named("factors") = j10286k, Rcpp::Named("variables") = j19505k, Rcpp::Named("traincases") = j12773k, Rcpp::Named("min.target") = j18296k, Rcpp::Named("max.target") = j10500k); j16348k.attr("class") = "FMmodel"; return j16348k; }
// [[Rcpp::export]]
NumericVector predictFM(List j10710k) { NumericMatrix j12503k = as< NumericMatrix >(j10710k["mX"]); std::vector<int> j10286k = as< std::vector<int> >(j10710k["factors"]); std::vector<double> j13186k = as< std::vector<double> >(j10710k["weights"]); bool j14595k=(j10710k["truncate"]); double j18296k=(j10710k["min.target"]); double j10500k=(j10710k["max.target"]); double j19505k=(j10710k["variables"]); std::vector<double>* j16090k; int j13444k=j10286k.size(); int *j15138k; double* j12131k; double* j10678k; int j15083k; int j12773k=0; for(int j13117k = 0; j13117k < j12503k.nrow(); j13117k++ ){ if(j12773k<j12503k(j13117k,0)) j12773k=j12503k(j13117k,0); } j12773k++; std::vector< std::vector<int> >j19465k(j19505k); std::vector< std::vector<double> >j18645k(j19505k); for(int j13117k = 0; j13117k < j12503k.nrow(); j13117k++ ){ j19465k[j12503k(j13117k,1)].push_back(j12503k(j13117k,0)); j18645k[j12503k(j13117k,1)].push_back(j12503k(j13117k,2)); } std::vector< std::vector< std::vector< std::vector<double> > > > j17518k; j17518k.resize(j13444k); for(int j11808k = 0; j11808k < j13444k; j11808k++ ) { j17518k[j11808k].resize(j10286k[j11808k]); for(int j14583k = 0; j14583k < j10286k[j11808k]; j14583k++ ) { j17518k[j11808k][j14583k].resize(j12773k); for(int j19766k = 0; j19766k < j12773k; j19766k++ ){ j17518k[j11808k][j14583k][j19766k].resize(j11808k+1); for(int j17234k = 0; j17234k < j11808k+1; j17234k++ ) j17518k[j11808k][j14583k][j19766k][j17234k]=0; } } } for(unsigned int j11808k = 0; j11808k < j17518k.size(); j11808k++ ) { for(unsigned int j14583k = 0; j14583k < j17518k[j11808k].size(); j14583k++ ) { for(unsigned int j19766k = 0; j19766k < j17518k[j11808k][j14583k].size(); j19766k++ ){ for(unsigned int j17234k = 0; j17234k < j17518k[j11808k][j14583k][j19766k].size(); j17234k++ ) j17518k[j11808k][j14583k][j19766k][j17234k]=0; } } } j15083k=0; for(int j17239k = 0; j17239k < j13444k; j17239k++ ) { for( int j10016k = 0; j10016k < j10286k[j17239k]; j10016k++ ) { for( int j14606k = 0; j14606k < j19505k; j14606k++ ) { j15083k++; j10678k=&j13186k[j15083k]; for( unsigned int j13117k = 0; j13117k < j19465k[j14606k].size(); j13117k++ ) { j15138k=&j19465k[j14606k][j13117k]; j12131k=&j18645k[j14606k][j13117k]; j16090k=&j17518k[j17239k][j10016k][*j15138k]; for( unsigned int j19863k = 1; j19863k <= (*j16090k).size(); j19863k++ ) { (*j16090k)[j19863k-1]+=pow(*j12131k,(double) j19863k)*pow(*j10678k,(double) j19863k); } } } } } NumericVector j17261k(j12773k,j13186k[0]); std::vector< std::vector<double> >* j18302k; for(int j17239k = 0; j17239k < j13444k; j17239k++ ) { for( int j10016k = 0; j10016k < j10286k[j17239k]; j10016k++ ) { j18302k=&j17518k[j17239k][j10016k]; if(j17239k==0) for(unsigned int j13117k = 0; j13117k < (*j18302k).size(); j13117k++ ) j17261k[j13117k]+=(*j18302k)[j13117k][0]; if(j17239k==1) for(unsigned int j13117k = 0; j13117k < (*j18302k).size(); j13117k++ ) j17261k[j13117k]+=(1.0/2.0)*((1.0*pow((*j18302k)[j13117k][0],2.0))+(-1.0*pow((*j18302k)[j13117k][1],1.0))); if(j17239k==2) for(unsigned int j13117k = 0; j13117k < (*j18302k).size(); j13117k++ ) j17261k[j13117k]+=(1.0/6.0)*((1.0*pow((*j18302k)[j13117k][0],3.0))+(-3.0*pow((*j18302k)[j13117k][1],1.0)*pow((*j18302k)[j13117k][0],1.0))+(2.0*pow((*j18302k)[j13117k][2],1.0))); } } if(j14595k){ for(int j13117k=0;j13117k<j12773k;j13117k++) { if(j17261k[j13117k]>j10500k) j17261k[j13117k]=j10500k; if(j17261k[j13117k]<j18296k) j17261k[j13117k]=j18296k; } } return (j17261k); }
