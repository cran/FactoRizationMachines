#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export]]
List trainFM(List j11161k) { int j10403k=(j11161k["iIter"]); int j17147k=(j11161k["variables"]); int j19276k=(j11161k["traincases"]); double j15850k=(j11161k["dStdev"]); std::vector<int> j19543k = as< std::vector<int> >(j11161k["vK"]); bool j19878k=(j11161k["bIntercept"]); std::vector<double> j17938k = as< std::vector<double> >(j11161k["vLambda"]); std::vector<double> j11728k = as< std::vector<double> >(j11161k["lV3"]); NumericMatrix j10340k = as< NumericMatrix >(j11161k["mX"]); std::vector<double> j11048k = as< std::vector<double> >(j11161k["vY"]); bool j13114k=(j11161k["bMCMC"]); if(j19543k.size()!=10) j19543k.resize(10,0); int j11146k=0; int *j14202k; double* j16631k; double* j14375k; double* j10355k; double* j18168k; std::vector<double>* j19208k; double j13588k, j18017k, j14330k; int j14181k; int j11722k=j19543k.size(); std::vector<double> j15952k(j10340k.nrow()); std::vector< std::vector<double> > j16328k(j11722k); std::vector< std::vector<double> > j14547k(j11722k); for(int j17775k=0;j17775k<j11722k;j17775k++){ j16328k[j17775k].resize(j19543k[j17775k]); j14547k[j17775k].resize(j19543k[j17775k]); } for(unsigned int j17775k=0;j17775k<j16328k.size();j17775k++){ for(unsigned int j15275k=0;j15275k<j16328k[j17775k].size();j15275k++){ j16328k[j17775k][j15275k]=0.0; j14547k[j17775k][j15275k]=0.0; } } double j13089k=1; double j17596k, j17370k1, j19208k1, j16631k1, j14375k1, j19203k, j15606k, j19818k; double j15034k, j14375k2, j16631k2, j18871k, j16483k, j18197k, j10428k; std::vector< std::vector<int> >j13994k(j17147k); std::vector< std::vector<double> >j17190k(j17147k); for(int j18579k = 0; j18579k < j10340k.nrow(); j18579k++ ){ j13994k[j10340k(j18579k,1)].push_back(j10340k(j18579k,0)); j17190k[j10340k(j18579k,1)].push_back(j10340k(j18579k,2)); } double j17261k=*(std::min_element(j11048k.begin(),j11048k.end())); double j15726k=*(std::max_element(j11048k.begin(),j11048k.end())); j13588k=0; for(int j13914k=0;j13914k<j11722k;j13914k++) j13588k+=j19543k[j13914k]; if(j11728k.size()!=j13588k*j17147k+1){ j11728k.resize(j13588k*j17147k+1,0); for(unsigned int j17775k=0;j17775k<j11728k.size();j17775k++){ j18197k=0; j10428k=j15850k; do { do { j15034k = R::runif(0,1); } while (j15034k == 0.0); j14375k2 = 1.7156 * (R::runif(0,1) - 0.5); j16631k2 = j15034k - 0.449871; j18871k = std::abs(j14375k2) + 0.386595; j16483k = j16631k2*j16631k2 + j18871k*(0.19600*j18871k-0.25472*j16631k2); if (j16483k < 0.27597) { break; } } while ((j16483k > 0.27846) || ((j14375k2*j14375k2) > (-4.0*j15034k*j15034k*std::log(j15034k)))); j11728k[j17775k]=j18197k+(j10428k*(j14375k2/j15034k)); } } std::vector<double> j12465k(j11728k.size(),0); std::vector< std::vector< std::vector< std::vector<double> > > > j17300k; j17300k.resize(j11722k); for(int j17775k = 0; j17775k < j11722k; j17775k++ ) { j17300k[j17775k].resize(j19543k[j17775k]); for(int j15275k = 0; j15275k < j19543k[j17775k]; j15275k++ ) { j17300k[j17775k][j15275k].resize(j19276k); for(int j19251k = 0; j19251k < j19276k; j19251k++ ){ j17300k[j17775k][j15275k][j19251k].resize(j17775k+1); for(int j11767k = 0; j11767k < j17775k+1; j11767k++ ) j17300k[j17775k][j15275k][j19251k][j11767k]=0; } } } for(unsigned int j17775k = 0; j17775k < j17300k.size(); j17775k++ ) { for(unsigned int j15275k = 0; j15275k < j17300k[j17775k].size(); j15275k++ ) { for(unsigned int j19251k = 0; j19251k < j17300k[j17775k][j15275k].size(); j19251k++ ){ for(unsigned int j11767k = 0; j11767k < j17300k[j17775k][j15275k][j19251k].size(); j11767k++ ) j17300k[j17775k][j15275k][j19251k][j11767k]=0; } } } j14181k=0; for(int j13914k = 0; j13914k < j11722k; j13914k++ ) { for( int j15005k = 0; j15005k < j19543k[j13914k]; j15005k++ ) { for( int j19508k = 0; j19508k < j17147k; j19508k++ ) { j14181k++; j14375k=&j11728k[j14181k]; for( unsigned int j18579k = 0; j18579k < j13994k[j19508k].size(); j18579k++ ) { j14202k=&j13994k[j19508k][j18579k]; j16631k=&j17190k[j19508k][j18579k]; j19208k=&j17300k[j13914k][j15005k][*j14202k]; for( unsigned int j17025k = 1; j17025k <= (*j19208k).size(); j17025k++ ) { (*j19208k)[j17025k-1]+=pow(*j16631k,(double) j17025k)*pow(*j14375k,(double) j17025k); } } } } } std::vector< std::vector<double> >* j17370k; std::vector<double> j12706k(j19276k,j11728k[0]); for(int j13914k = 0; j13914k < j11722k; j13914k++ ) { for( int j15005k = 0; j15005k < j19543k[j13914k]; j15005k++ ) { j17370k=&j17300k[j13914k][j15005k]; if(j13914k==0) for(unsigned int j18579k = 0; j18579k < (*j17370k).size(); j18579k++ ) j12706k[j18579k]+=(*j17370k)[j18579k][0]; if(j13914k==1) for(unsigned int j18579k = 0; j18579k < (*j17370k).size(); j18579k++ ) j12706k[j18579k]+=(0.5*pow((*j17370k)[j18579k][0], 2.0))+(-0.5*pow((*j17370k)[j18579k][1], 1.0)); if(j13914k==2) for(unsigned int j18579k = 0; j18579k < (*j17370k).size(); j18579k++ ) j12706k[j18579k]+=(0.1666667*pow((*j17370k)[j18579k][0], 3.0))+(-0.5*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][1], 1.0))+(0.3333333*pow((*j17370k)[j18579k][2], 1.0)); if(j13914k==3) for(unsigned int j18579k = 0; j18579k < (*j17370k).size(); j18579k++ ) j12706k[j18579k]+=(0.04166667*pow((*j17370k)[j18579k][0], 4.0))+(-0.25*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][1], 1.0))+(0.125*pow((*j17370k)[j18579k][1], 2.0))+(0.3333333*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][2], 1.0))+(-0.25*pow((*j17370k)[j18579k][3], 1.0)); if(j13914k==4) for(unsigned int j18579k = 0; j18579k < (*j17370k).size(); j18579k++ ) j12706k[j18579k]+=(0.008333333*pow((*j17370k)[j18579k][0], 5.0))+(-0.08333333*pow((*j17370k)[j18579k][0], 3.0)*pow((*j17370k)[j18579k][1], 1.0))+(0.125*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][1], 2.0))+(0.1666667*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][2], 1.0))+(-0.1666667*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][2], 1.0))+(-0.25*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][3], 1.0))+(0.2*pow((*j17370k)[j18579k][4], 1.0)); if(j13914k==5) for(unsigned int j18579k = 0; j18579k < (*j17370k).size(); j18579k++ ) j12706k[j18579k]+=(0.001388889*pow((*j17370k)[j18579k][0], 6.0))+(-0.02083333*pow((*j17370k)[j18579k][0], 4.0)*pow((*j17370k)[j18579k][1], 1.0))+(0.0625*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][1], 2.0))+(-0.02083333*pow((*j17370k)[j18579k][1], 3.0))+(0.05555556*pow((*j17370k)[j18579k][0], 3.0)*pow((*j17370k)[j18579k][2], 1.0))+(-0.1666667*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][2], 1.0))+(0.05555556*pow((*j17370k)[j18579k][2], 2.0))+(-0.125*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][3], 1.0))+(0.125*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][3], 1.0))+(0.2*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][4], 1.0))+(-0.1666667*pow((*j17370k)[j18579k][5], 1.0)); if(j13914k==6) for(unsigned int j18579k = 0; j18579k < (*j17370k).size(); j18579k++ ) j12706k[j18579k]+=(0.0001984127*pow((*j17370k)[j18579k][0], 7.0))+(-0.004166667*pow((*j17370k)[j18579k][0], 5.0)*pow((*j17370k)[j18579k][1], 1.0))+(0.02083333*pow((*j17370k)[j18579k][0], 3.0)*pow((*j17370k)[j18579k][1], 2.0))+(-0.02083333*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][1], 3.0))+(0.01388889*pow((*j17370k)[j18579k][0], 4.0)*pow((*j17370k)[j18579k][2], 1.0))+(-0.08333333*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][2], 1.0))+(0.04166667*pow((*j17370k)[j18579k][1], 2.0)*pow((*j17370k)[j18579k][2], 1.0))+(0.05555556*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][2], 2.0))+(-0.04166667*pow((*j17370k)[j18579k][0], 3.0)*pow((*j17370k)[j18579k][3], 1.0))+(0.125*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][3], 1.0))+(-0.08333333*pow((*j17370k)[j18579k][2], 1.0)*pow((*j17370k)[j18579k][3], 1.0))+(0.1*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][4], 1.0))+(-0.1*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][4], 1.0))+(-0.1666667*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][5], 1.0))+(0.1428571*pow((*j17370k)[j18579k][6], 1.0)); if(j13914k==7) for(unsigned int j18579k = 0; j18579k < (*j17370k).size(); j18579k++ ) j12706k[j18579k]+=(2.480159e-05*pow((*j17370k)[j18579k][0], 8.0))+(-0.0006944444*pow((*j17370k)[j18579k][0], 6.0)*pow((*j17370k)[j18579k][1], 1.0))+(0.005208333*pow((*j17370k)[j18579k][0], 4.0)*pow((*j17370k)[j18579k][1], 2.0))+(-0.01041667*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][1], 3.0))+(0.002604167*pow((*j17370k)[j18579k][1], 4.0))+(0.002777778*pow((*j17370k)[j18579k][0], 5.0)*pow((*j17370k)[j18579k][2], 1.0))+(-0.02777778*pow((*j17370k)[j18579k][0], 3.0)*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][2], 1.0))+(0.04166667*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][1], 2.0)*pow((*j17370k)[j18579k][2], 1.0))+(0.02777778*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][2], 2.0))+(-0.02777778*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][2], 2.0))+(-0.01041667*pow((*j17370k)[j18579k][0], 4.0)*pow((*j17370k)[j18579k][3], 1.0))+(0.0625*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][3], 1.0))+(-0.03125*pow((*j17370k)[j18579k][1], 2.0)*pow((*j17370k)[j18579k][3], 1.0))+(-0.08333333*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][2], 1.0)*pow((*j17370k)[j18579k][3], 1.0))+(0.03125*pow((*j17370k)[j18579k][3], 2.0))+(0.03333333*pow((*j17370k)[j18579k][0], 3.0)*pow((*j17370k)[j18579k][4], 1.0))+(-0.1*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][4], 1.0))+(0.06666667*pow((*j17370k)[j18579k][2], 1.0)*pow((*j17370k)[j18579k][4], 1.0))+(-0.08333333*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][5], 1.0))+(0.08333333*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][5], 1.0))+(0.1428571*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][6], 1.0))+(-0.125*pow((*j17370k)[j18579k][7], 1.0)); if(j13914k==8) for(unsigned int j18579k = 0; j18579k < (*j17370k).size(); j18579k++ ) j12706k[j18579k]+=(2.755732e-06*pow((*j17370k)[j18579k][0], 9.0))+(-9.920635e-05*pow((*j17370k)[j18579k][0], 7.0)*pow((*j17370k)[j18579k][1], 1.0))+(0.001041667*pow((*j17370k)[j18579k][0], 5.0)*pow((*j17370k)[j18579k][1], 2.0))+(-0.003472222*pow((*j17370k)[j18579k][0], 3.0)*pow((*j17370k)[j18579k][1], 3.0))+(0.002604167*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][1], 4.0))+(0.000462963*pow((*j17370k)[j18579k][0], 6.0)*pow((*j17370k)[j18579k][2], 1.0))+(-0.006944444*pow((*j17370k)[j18579k][0], 4.0)*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][2], 1.0))+(0.02083333*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][1], 2.0)*pow((*j17370k)[j18579k][2], 1.0))+(-0.006944444*pow((*j17370k)[j18579k][1], 3.0)*pow((*j17370k)[j18579k][2], 1.0))+(0.009259259*pow((*j17370k)[j18579k][0], 3.0)*pow((*j17370k)[j18579k][2], 2.0))+(-0.02777778*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][2], 2.0))+(0.00617284*pow((*j17370k)[j18579k][2], 3.0))+(-0.002083333*pow((*j17370k)[j18579k][0], 5.0)*pow((*j17370k)[j18579k][3], 1.0))+(0.02083333*pow((*j17370k)[j18579k][0], 3.0)*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][3], 1.0))+(-0.03125*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][1], 2.0)*pow((*j17370k)[j18579k][3], 1.0))+(-0.04166667*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][2], 1.0)*pow((*j17370k)[j18579k][3], 1.0))+(0.04166667*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][2], 1.0)*pow((*j17370k)[j18579k][3], 1.0))+(0.03125*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][3], 2.0))+(0.008333333*pow((*j17370k)[j18579k][0], 4.0)*pow((*j17370k)[j18579k][4], 1.0))+(-0.05*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][4], 1.0))+(0.025*pow((*j17370k)[j18579k][1], 2.0)*pow((*j17370k)[j18579k][4], 1.0))+(0.06666667*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][2], 1.0)*pow((*j17370k)[j18579k][4], 1.0))+(-0.05*pow((*j17370k)[j18579k][3], 1.0)*pow((*j17370k)[j18579k][4], 1.0))+(-0.02777778*pow((*j17370k)[j18579k][0], 3.0)*pow((*j17370k)[j18579k][5], 1.0))+(0.08333333*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][5], 1.0))+(-0.05555556*pow((*j17370k)[j18579k][2], 1.0)*pow((*j17370k)[j18579k][5], 1.0))+(0.07142857*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][6], 1.0))+(-0.07142857*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][6], 1.0))+(-0.125*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][7], 1.0))+(0.1111111*pow((*j17370k)[j18579k][8], 1.0)); if(j13914k==9) for(unsigned int j18579k = 0; j18579k < (*j17370k).size(); j18579k++ ) j12706k[j18579k]+=(2.755732e-07*pow((*j17370k)[j18579k][0], 10.0))+(-1.240079e-05*pow((*j17370k)[j18579k][0], 8.0)*pow((*j17370k)[j18579k][1], 1.0))+(0.0001736111*pow((*j17370k)[j18579k][0], 6.0)*pow((*j17370k)[j18579k][1], 2.0))+(-0.0008680556*pow((*j17370k)[j18579k][0], 4.0)*pow((*j17370k)[j18579k][1], 3.0))+(0.001302083*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][1], 4.0))+(-0.0002604167*pow((*j17370k)[j18579k][1], 5.0))+(6.613757e-05*pow((*j17370k)[j18579k][0], 7.0)*pow((*j17370k)[j18579k][2], 1.0))+(-0.001388889*pow((*j17370k)[j18579k][0], 5.0)*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][2], 1.0))+(0.006944444*pow((*j17370k)[j18579k][0], 3.0)*pow((*j17370k)[j18579k][1], 2.0)*pow((*j17370k)[j18579k][2], 1.0))+(-0.006944444*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][1], 3.0)*pow((*j17370k)[j18579k][2], 1.0))+(0.002314815*pow((*j17370k)[j18579k][0], 4.0)*pow((*j17370k)[j18579k][2], 2.0))+(-0.01388889*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][2], 2.0))+(0.006944444*pow((*j17370k)[j18579k][1], 2.0)*pow((*j17370k)[j18579k][2], 2.0))+(0.00617284*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][2], 3.0))+(-0.0003472222*pow((*j17370k)[j18579k][0], 6.0)*pow((*j17370k)[j18579k][3], 1.0))+(0.005208333*pow((*j17370k)[j18579k][0], 4.0)*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][3], 1.0))+(-0.015625*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][1], 2.0)*pow((*j17370k)[j18579k][3], 1.0))+(0.005208333*pow((*j17370k)[j18579k][1], 3.0)*pow((*j17370k)[j18579k][3], 1.0))+(-0.01388889*pow((*j17370k)[j18579k][0], 3.0)*pow((*j17370k)[j18579k][2], 1.0)*pow((*j17370k)[j18579k][3], 1.0))+(0.04166667*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][2], 1.0)*pow((*j17370k)[j18579k][3], 1.0))+(-0.01388889*pow((*j17370k)[j18579k][2], 2.0)*pow((*j17370k)[j18579k][3], 1.0))+(0.015625*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][3], 2.0))+(-0.015625*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][3], 2.0))+(0.001666667*pow((*j17370k)[j18579k][0], 5.0)*pow((*j17370k)[j18579k][4], 1.0))+(-0.01666667*pow((*j17370k)[j18579k][0], 3.0)*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][4], 1.0))+(0.025*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][1], 2.0)*pow((*j17370k)[j18579k][4], 1.0))+(0.03333333*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][2], 1.0)*pow((*j17370k)[j18579k][4], 1.0))+(-0.03333333*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][2], 1.0)*pow((*j17370k)[j18579k][4], 1.0))+(-0.05*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][3], 1.0)*pow((*j17370k)[j18579k][4], 1.0))+(0.02*pow((*j17370k)[j18579k][4], 2.0))+(-0.006944444*pow((*j17370k)[j18579k][0], 4.0)*pow((*j17370k)[j18579k][5], 1.0))+(0.04166667*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][5], 1.0))+(-0.02083333*pow((*j17370k)[j18579k][1], 2.0)*pow((*j17370k)[j18579k][5], 1.0))+(-0.05555556*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][2], 1.0)*pow((*j17370k)[j18579k][5], 1.0))+(0.04166667*pow((*j17370k)[j18579k][3], 1.0)*pow((*j17370k)[j18579k][5], 1.0))+(0.02380952*pow((*j17370k)[j18579k][0], 3.0)*pow((*j17370k)[j18579k][6], 1.0))+(-0.07142857*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][6], 1.0))+(0.04761905*pow((*j17370k)[j18579k][2], 1.0)*pow((*j17370k)[j18579k][6], 1.0))+(-0.0625*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][7], 1.0))+(0.0625*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][7], 1.0))+(0.1111111*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][8], 1.0))+(-0.1*pow((*j17370k)[j18579k][9], 1.0)); } } std::vector<double> j14561k(j19276k,0); for(int j18579k=0;j18579k<j19276k;j18579k++) j14561k[j18579k]=j12706k[j18579k]-j11048k[j18579k]; for(int j11470k=0; j11470k<j10403k; j11470k++){ if(j13114k){ j15606k=(j19276k+1.0)/2.0; j13588k=0; for( unsigned int j18579k=0; j18579k<j14561k.size(); j18579k++ ) j13588k+=pow(j14561k[j18579k],2.0); j19818k=(j13588k+1.0)/2.0; if (j15606k < 1.0) { j17596k=j15606k+1; } else { j17596k=j15606k; } j17370k1 = j17596k - 1.0/3.0; j19208k1 = 1.0 / std::sqrt(9.0 * j17370k1); do { do { do { do { j15034k = R::runif(0,1); } while (j15034k == 0.0); j14375k2 = 1.7156 * (R::runif(0,1) - 0.5); j16631k2 = j15034k - 0.449871; j18871k = std::abs(j14375k2) + 0.386595; j16483k = j16631k2*j16631k2 + j18871k*(0.19600*j18871k-0.25472*j16631k2); if (j16483k < 0.27597) { break; } } while ((j16483k > 0.27846) || ((j14375k2*j14375k2) > (-4.0*j15034k*j15034k*std::log(j15034k)))); j16631k1=j14375k2/j15034k; j14375k1 = 1.0 + j19208k1*j16631k1; } while (j14375k1 <= 0.0); j14375k1 = j14375k1 * j14375k1 * j14375k1; j19203k = R::runif(0,1); } while ( (j19203k >= (1.0 - 0.0331 * (j16631k1*j16631k1) * (j16631k1*j16631k1))) && (log(j19203k) >= (0.5 * j16631k1 * j16631k1 + j17370k1 * (1.0 - j14375k1 + std::log(j14375k1)))) ); if (j15606k < 1.0) { do { j19203k = R::runif(0,1); } while (j19203k == 0.0); j13089k=(j17370k1*j14375k1*pow(j19203k, 1.0/j15606k))/j19818k; } else{ j13089k=(j17370k1*j14375k1)/j19818k; } j14181k=0; for(int j13914k = 0; j13914k < j11722k; j13914k++ ) { for( int j15005k = 0; j15005k < j19543k[j13914k]; j15005k++ ) { j13588k=0; j18017k=0; for( int j19508k = 0; j19508k < j17147k; j19508k++ ) { j14181k++; j13588k+=pow(j11728k[j14181k]-j16328k[j13914k][j15005k],2.0); j18017k+=pow(j16328k[j13914k][j15005k],2.0); } j15606k=(j17147k+2.0)/2.0; j19818k=(j13588k+pow(j16328k[j13914k][j15005k],2.0)+1.0)/2.0; if (j15606k < 1.0) { j17596k=j15606k+1; } else { j17596k=j15606k; } j17370k1 = j17596k - 1.0/3.0; j19208k1 = 1.0 / std::sqrt(9.0 * j17370k1); do { do { do { do { j15034k = R::runif(0,1); } while (j15034k == 0.0); j14375k2 = 1.7156 * (R::runif(0,1) - 0.5); j16631k2 = j15034k - 0.449871; j18871k = std::abs(j14375k2) + 0.386595; j16483k = j16631k2*j16631k2 + j18871k*(0.19600*j18871k-0.25472*j16631k2); if (j16483k < 0.27597) { break; } } while ((j16483k > 0.27846) || ((j14375k2*j14375k2) > (-4.0*j15034k*j15034k*std::log(j15034k)))); j16631k1=j14375k2/j15034k; j14375k1 = 1.0 + j19208k1*j16631k1; } while (j14375k1 <= 0.0); j14375k1 = j14375k1 * j14375k1 * j14375k1; j19203k = R::runif(0,1); } while ( (j19203k >= (1.0 - 0.0331 * (j16631k1*j16631k1) * (j16631k1*j16631k1))) && (log(j19203k) >= (0.5 * j16631k1 * j16631k1 + j17370k1 * (1.0 - j14375k1 + std::log(j14375k1)))) ); if (j15606k < 1.0) { do { j19203k = R::runif(0,1); } while (j19203k == 0.0); j14547k[j13914k][j15005k]=(j17370k1*j14375k1*pow(j19203k, 1.0/j15606k))/j19818k; } else{ j14547k[j13914k][j15005k]=(j17370k1*j14375k1)/j19818k; } j18197k=j18017k/(j17147k+1.0); j10428k=(1.0/((j17147k+1.0)*j14547k[j13914k][j15005k])); do { do { j15034k = R::runif(0,1); } while (j15034k == 0.0); j14375k2 = 1.7156 * (R::runif(0,1) - 0.5); j16631k2 = j15034k - 0.449871; j18871k = std::abs(j14375k2) + 0.386595; j16483k = j16631k2*j16631k2 + j18871k*(0.19600*j18871k-0.25472*j16631k2); if (j16483k < 0.27597) { break; } } while ((j16483k > 0.27846) || ((j14375k2*j14375k2) > (-4.0*j15034k*j15034k*std::log(j15034k)))); j16328k[j13914k][j15005k]=j18197k+(std::sqrt(j10428k)*(j14375k2/j15034k)); } } } if(j19878k){ j14330k=0.0; for( unsigned int j18579k=0; j18579k<j14561k.size(); j18579k++ ) j14330k+=(j14561k[j18579k]-j11728k[0]); if(j13114k){ j10428k=(1.0/((j13089k*((double) j14561k.size())))); j18197k=-((j13089k*j14330k))*j10428k; do { do { j15034k = R::runif(0,1); } while (j15034k == 0.0); j14375k2 = 1.7156 * (R::runif(0,1) - 0.5); j16631k2 = j15034k - 0.449871; j18871k = std::abs(j14375k2) + 0.386595; j16483k = j16631k2*j16631k2 + j18871k*(0.19600*j18871k-0.25472*j16631k2); if (j16483k < 0.27597) { break; } } while ((j16483k > 0.27846) || ((j14375k2*j14375k2) > (-4.0*j15034k*j15034k*std::log(j15034k)))); j14330k=j18197k+(std::sqrt(j10428k)*(j14375k2/j15034k)); } else { j14330k/=(-double(j14561k.size())); } if(j14330k!=j14330k) j14330k=0; for( unsigned int j18579k=0; j18579k<j14561k.size(); j18579k++ ) j14561k[j18579k]+=(j14330k-j11728k[0]); j11728k[0]=j14330k; } j14181k=0; j18168k=&j17938k[0]; for( int j15005k = 0; j15005k < j19543k[0]; j15005k++ ) { for( int j19508k = 0; j19508k < j17147k; j19508k++ ) { j14181k++; j14375k=&j11728k[j14181k]; j13588k=0; j18017k=0; for( unsigned int j18579k = 0; j18579k < j13994k[j19508k].size(); j18579k++ ) { j14202k=&j13994k[j19508k][j18579k]; j16631k=&j17190k[j19508k][j18579k]; j19208k=&j17300k[0][j15005k][*j14202k]; j10355k=&j14561k[*j14202k]; j15952k[j18579k]=(*j16631k); j13588k+=(((*j10355k)-((*j14375k)*j15952k[j18579k]))*j15952k[j18579k]); j18017k+=pow(j15952k[j18579k],2.0)+(*j18168k); } if(j13114k){ j10428k=std::sqrt(1.0/((j13089k*j18017k)+j14547k[0][j15005k])); j18197k=-((j13089k*j13588k)+(j16328k[0][j15005k]*j14547k[0][j15005k]))*j10428k*j10428k; do { do { j15034k = R::runif(0,1); } while (j15034k == 0.0); j14375k2 = 1.7156 * (R::runif(0,1) - 0.5); j16631k2 = j15034k - 0.449871; j18871k = std::abs(j14375k2) + 0.386595; j16483k = j16631k2*j16631k2 + j18871k*(0.19600*j18871k-0.25472*j16631k2); if (j16483k < 0.27597) { break; } } while ((j16483k > 0.27846) || ((j14375k2*j14375k2) > (-4.0*j15034k*j15034k*std::log(j15034k)))); j14330k=j18197k+(j10428k*(j14375k2/j15034k)); } else { j14330k=(-j13588k/j18017k); } if(std::isinf(j14330k) || std::isnan(j14330k)) j14330k=0; for( unsigned int j18579k = 0; j18579k < j13994k[j19508k].size(); j18579k++ ) { j14202k=&j13994k[j19508k][j18579k]; j16631k=&j17190k[j19508k][j18579k]; j19208k=&j17300k[0][j15005k][*j14202k]; j10355k=&j14561k[*j14202k]; (*j10355k)+=(j14330k-(*j14375k))*j15952k[j18579k]; (*j19208k)[0]+=(pow(j14330k,1.0)-pow(*j14375k,1.0))*pow(*j16631k,1.0); (*j19208k)[-1]+=(pow(j14330k,0.0)-pow(*j14375k,0.0))*pow(*j16631k,0.0); } (*j14375k)=j14330k; } } j18168k=&j17938k[1]; for( int j15005k = 0; j15005k < j19543k[1]; j15005k++ ) { for( int j19508k = 0; j19508k < j17147k; j19508k++ ) { j14181k++; j14375k=&j11728k[j14181k]; j13588k=0; j18017k=0; for( unsigned int j18579k = 0; j18579k < j13994k[j19508k].size(); j18579k++ ) { j14202k=&j13994k[j19508k][j18579k]; j16631k=&j17190k[j19508k][j18579k]; j19208k=&j17300k[1][j15005k][*j14202k]; j10355k=&j14561k[*j14202k]; j15952k[j18579k]=((1.0)*pow((*j19208k)[0],1.0))+((-1.0)*(*j16631k)*(*j14375k)); j13588k+=(((*j10355k)-((*j14375k)*j15952k[j18579k]))*j15952k[j18579k]); j18017k+=pow(j15952k[j18579k],2.0)+(*j18168k); } if(j13114k){ j10428k=std::sqrt(1.0/((j13089k*j18017k)+j14547k[1][j15005k])); j18197k=-((j13089k*j13588k)+(j16328k[1][j15005k]*j14547k[1][j15005k]))*j10428k*j10428k; do { do { j15034k = R::runif(0,1); } while (j15034k == 0.0); j14375k2 = 1.7156 * (R::runif(0,1) - 0.5); j16631k2 = j15034k - 0.449871; j18871k = std::abs(j14375k2) + 0.386595; j16483k = j16631k2*j16631k2 + j18871k*(0.19600*j18871k-0.25472*j16631k2); if (j16483k < 0.27597) { break; } } while ((j16483k > 0.27846) || ((j14375k2*j14375k2) > (-4.0*j15034k*j15034k*std::log(j15034k)))); j14330k=j18197k+(j10428k*(j14375k2/j15034k)); } else { j14330k=(-j13588k/j18017k); } if(std::isinf(j14330k) || std::isnan(j14330k)) j14330k=0; for( unsigned int j18579k = 0; j18579k < j13994k[j19508k].size(); j18579k++ ) { j14202k=&j13994k[j19508k][j18579k]; j16631k=&j17190k[j19508k][j18579k]; j19208k=&j17300k[1][j15005k][*j14202k]; j10355k=&j14561k[*j14202k]; (*j10355k)+=(j14330k-(*j14375k))*j15952k[j18579k]; (*j19208k)[0]+=(pow(j14330k,1.0)-pow(*j14375k,1.0))*pow(*j16631k,1.0); } (*j14375k)=j14330k; } } j18168k=&j17938k[2]; for( int j15005k = 0; j15005k < j19543k[2]; j15005k++ ) { for( int j19508k = 0; j19508k < j17147k; j19508k++ ) { j14181k++; j14375k=&j11728k[j14181k]; j13588k=0; j18017k=0; for( unsigned int j18579k = 0; j18579k < j13994k[j19508k].size(); j18579k++ ) { j14202k=&j13994k[j19508k][j18579k]; j16631k=&j17190k[j19508k][j18579k]; j19208k=&j17300k[2][j15005k][*j14202k]; j10355k=&j14561k[*j14202k]; j15952k[j18579k]=((0.5)*pow((*j19208k)[0],2.0))+((-0.5)*pow((*j19208k)[1],1.0))+((-1.0)*pow((*j19208k)[0],1.0)*(*j16631k)*(*j14375k))+((1.0)*pow((*j16631k)*(*j14375k),2.0)); j13588k+=(((*j10355k)-((*j14375k)*j15952k[j18579k]))*j15952k[j18579k]); j18017k+=pow(j15952k[j18579k],2.0)+(*j18168k); } if(j13114k){ j10428k=std::sqrt(1.0/((j13089k*j18017k)+j14547k[2][j15005k])); j18197k=-((j13089k*j13588k)+(j16328k[2][j15005k]*j14547k[2][j15005k]))*j10428k*j10428k; do { do { j15034k = R::runif(0,1); } while (j15034k == 0.0); j14375k2 = 1.7156 * (R::runif(0,1) - 0.5); j16631k2 = j15034k - 0.449871; j18871k = std::abs(j14375k2) + 0.386595; j16483k = j16631k2*j16631k2 + j18871k*(0.19600*j18871k-0.25472*j16631k2); if (j16483k < 0.27597) { break; } } while ((j16483k > 0.27846) || ((j14375k2*j14375k2) > (-4.0*j15034k*j15034k*std::log(j15034k)))); j14330k=j18197k+(j10428k*(j14375k2/j15034k)); } else { j14330k=(-j13588k/j18017k); } if(std::isinf(j14330k) || std::isnan(j14330k)) j14330k=0; for( unsigned int j18579k = 0; j18579k < j13994k[j19508k].size(); j18579k++ ) { j14202k=&j13994k[j19508k][j18579k]; j16631k=&j17190k[j19508k][j18579k]; j19208k=&j17300k[2][j15005k][*j14202k]; j10355k=&j14561k[*j14202k]; (*j10355k)+=(j14330k-(*j14375k))*j15952k[j18579k]; (*j19208k)[0]+=(pow(j14330k,1.0)-pow(*j14375k,1.0))*pow(*j16631k,1.0); (*j19208k)[1]+=(pow(j14330k,2.0)-pow(*j14375k,2.0))*pow(*j16631k,2.0); } (*j14375k)=j14330k; } } j18168k=&j17938k[3]; for( int j15005k = 0; j15005k < j19543k[3]; j15005k++ ) { for( int j19508k = 0; j19508k < j17147k; j19508k++ ) { j14181k++; j14375k=&j11728k[j14181k]; j13588k=0; j18017k=0; for( unsigned int j18579k = 0; j18579k < j13994k[j19508k].size(); j18579k++ ) { j14202k=&j13994k[j19508k][j18579k]; j16631k=&j17190k[j19508k][j18579k]; j19208k=&j17300k[3][j15005k][*j14202k]; j10355k=&j14561k[*j14202k]; j15952k[j18579k]=((0.1666667)*pow((*j19208k)[0],3.0))+((-0.5)*pow((*j19208k)[0],1.0)*pow((*j19208k)[1],1.0))+((-0.5)*pow((*j19208k)[0],2.0)*(*j16631k)*(*j14375k))+((0.5)*pow((*j19208k)[1],1.0)*(*j16631k)*(*j14375k))+((0.3333333)*pow((*j19208k)[2],1.0))+((1.0)*pow((*j19208k)[0],1.0)*pow((*j16631k)*(*j14375k),2.0))+((-1.0)*pow((*j16631k)*(*j14375k),3.0)); j13588k+=(((*j10355k)-((*j14375k)*j15952k[j18579k]))*j15952k[j18579k]); j18017k+=pow(j15952k[j18579k],2.0)+(*j18168k); } if(j13114k){ j10428k=std::sqrt(1.0/((j13089k*j18017k)+j14547k[3][j15005k])); j18197k=-((j13089k*j13588k)+(j16328k[3][j15005k]*j14547k[3][j15005k]))*j10428k*j10428k; do { do { j15034k = R::runif(0,1); } while (j15034k == 0.0); j14375k2 = 1.7156 * (R::runif(0,1) - 0.5); j16631k2 = j15034k - 0.449871; j18871k = std::abs(j14375k2) + 0.386595; j16483k = j16631k2*j16631k2 + j18871k*(0.19600*j18871k-0.25472*j16631k2); if (j16483k < 0.27597) { break; } } while ((j16483k > 0.27846) || ((j14375k2*j14375k2) > (-4.0*j15034k*j15034k*std::log(j15034k)))); j14330k=j18197k+(j10428k*(j14375k2/j15034k)); } else { j14330k=(-j13588k/j18017k); } if(std::isinf(j14330k) || std::isnan(j14330k)) j14330k=0; for( unsigned int j18579k = 0; j18579k < j13994k[j19508k].size(); j18579k++ ) { j14202k=&j13994k[j19508k][j18579k]; j16631k=&j17190k[j19508k][j18579k]; j19208k=&j17300k[3][j15005k][*j14202k]; j10355k=&j14561k[*j14202k]; (*j10355k)+=(j14330k-(*j14375k))*j15952k[j18579k]; (*j19208k)[0]+=(pow(j14330k,1.0)-pow(*j14375k,1.0))*pow(*j16631k,1.0); (*j19208k)[1]+=(pow(j14330k,2.0)-pow(*j14375k,2.0))*pow(*j16631k,2.0); (*j19208k)[2]+=(pow(j14330k,3.0)-pow(*j14375k,3.0))*pow(*j16631k,3.0); } (*j14375k)=j14330k; } } j18168k=&j17938k[4]; for( int j15005k = 0; j15005k < j19543k[4]; j15005k++ ) { for( int j19508k = 0; j19508k < j17147k; j19508k++ ) { j14181k++; j14375k=&j11728k[j14181k]; j13588k=0; j18017k=0; for( unsigned int j18579k = 0; j18579k < j13994k[j19508k].size(); j18579k++ ) { j14202k=&j13994k[j19508k][j18579k]; j16631k=&j17190k[j19508k][j18579k]; j19208k=&j17300k[4][j15005k][*j14202k]; j10355k=&j14561k[*j14202k]; j15952k[j18579k]=((0.04166667)*pow((*j19208k)[0],4.0))+((-0.25)*pow((*j19208k)[0],2.0)*pow((*j19208k)[1],1.0))+((-0.1666667)*pow((*j19208k)[0],3.0)*(*j16631k)*(*j14375k))+((0.125)*pow((*j19208k)[1],2.0))+((0.5)*pow((*j19208k)[0],1.0)*pow((*j19208k)[1],1.0)*(*j16631k)*(*j14375k))+((0.3333333)*pow((*j19208k)[0],1.0)*pow((*j19208k)[2],1.0))+((0.5)*pow((*j19208k)[0],2.0)*pow((*j16631k)*(*j14375k),2.0))+((-0.3333333)*(*j16631k)*(*j14375k)*pow((*j19208k)[2],1.0))+((-0.5)*pow((*j19208k)[1],1.0)*pow((*j16631k)*(*j14375k),2.0))+((-0.25)*pow((*j19208k)[3],1.0))+((-1.0)*pow((*j19208k)[0],1.0)*pow((*j16631k)*(*j14375k),3.0))+((1.0)*pow((*j16631k)*(*j14375k),4.0)); j13588k+=(((*j10355k)-((*j14375k)*j15952k[j18579k]))*j15952k[j18579k]); j18017k+=pow(j15952k[j18579k],2.0)+(*j18168k); } if(j13114k){ j10428k=std::sqrt(1.0/((j13089k*j18017k)+j14547k[4][j15005k])); j18197k=-((j13089k*j13588k)+(j16328k[4][j15005k]*j14547k[4][j15005k]))*j10428k*j10428k; do { do { j15034k = R::runif(0,1); } while (j15034k == 0.0); j14375k2 = 1.7156 * (R::runif(0,1) - 0.5); j16631k2 = j15034k - 0.449871; j18871k = std::abs(j14375k2) + 0.386595; j16483k = j16631k2*j16631k2 + j18871k*(0.19600*j18871k-0.25472*j16631k2); if (j16483k < 0.27597) { break; } } while ((j16483k > 0.27846) || ((j14375k2*j14375k2) > (-4.0*j15034k*j15034k*std::log(j15034k)))); j14330k=j18197k+(j10428k*(j14375k2/j15034k)); } else { j14330k=(-j13588k/j18017k); } if(std::isinf(j14330k) || std::isnan(j14330k)) j14330k=0; for( unsigned int j18579k = 0; j18579k < j13994k[j19508k].size(); j18579k++ ) { j14202k=&j13994k[j19508k][j18579k]; j16631k=&j17190k[j19508k][j18579k]; j19208k=&j17300k[4][j15005k][*j14202k]; j10355k=&j14561k[*j14202k]; (*j10355k)+=(j14330k-(*j14375k))*j15952k[j18579k]; (*j19208k)[0]+=(pow(j14330k,1.0)-pow(*j14375k,1.0))*pow(*j16631k,1.0); (*j19208k)[1]+=(pow(j14330k,2.0)-pow(*j14375k,2.0))*pow(*j16631k,2.0); (*j19208k)[2]+=(pow(j14330k,3.0)-pow(*j14375k,3.0))*pow(*j16631k,3.0); (*j19208k)[3]+=(pow(j14330k,4.0)-pow(*j14375k,4.0))*pow(*j16631k,4.0); } (*j14375k)=j14330k; } } j18168k=&j17938k[5]; for( int j15005k = 0; j15005k < j19543k[5]; j15005k++ ) { for( int j19508k = 0; j19508k < j17147k; j19508k++ ) { j14181k++; j14375k=&j11728k[j14181k]; j13588k=0; j18017k=0; for( unsigned int j18579k = 0; j18579k < j13994k[j19508k].size(); j18579k++ ) { j14202k=&j13994k[j19508k][j18579k]; j16631k=&j17190k[j19508k][j18579k]; j19208k=&j17300k[5][j15005k][*j14202k]; j10355k=&j14561k[*j14202k]; j15952k[j18579k]=((0.008333333)*pow((*j19208k)[0],5.0))+((-0.08333333)*pow((*j19208k)[0],3.0)*pow((*j19208k)[1],1.0))+((-0.04166667)*pow((*j19208k)[0],4.0)*(*j16631k)*(*j14375k))+((0.125)*pow((*j19208k)[0],1.0)*pow((*j19208k)[1],2.0))+((0.25)*pow((*j19208k)[0],2.0)*pow((*j19208k)[1],1.0)*(*j16631k)*(*j14375k))+((-0.125)*pow((*j19208k)[1],2.0)*(*j16631k)*(*j14375k))+((0.1666667)*pow((*j19208k)[0],2.0)*pow((*j19208k)[2],1.0))+((0.1666667)*pow((*j19208k)[0],3.0)*pow((*j16631k)*(*j14375k),2.0))+((-0.1666667)*pow((*j19208k)[1],1.0)*pow((*j19208k)[2],1.0))+((-0.3333333)*pow((*j19208k)[0],1.0)*(*j16631k)*(*j14375k)*pow((*j19208k)[2],1.0))+((-0.5)*pow((*j19208k)[0],1.0)*pow((*j19208k)[1],1.0)*pow((*j16631k)*(*j14375k),2.0))+((0.3333333)*pow((*j19208k)[2],1.0)*pow((*j16631k)*(*j14375k),2.0))+((-0.25)*pow((*j19208k)[0],1.0)*pow((*j19208k)[3],1.0))+((-0.5)*pow((*j19208k)[0],2.0)*pow((*j16631k)*(*j14375k),3.0))+((0.25)*(*j16631k)*(*j14375k)*pow((*j19208k)[3],1.0))+((0.5)*pow((*j19208k)[1],1.0)*pow((*j16631k)*(*j14375k),3.0))+((0.2)*pow((*j19208k)[4],1.0))+((1.0)*pow((*j19208k)[0],1.0)*pow((*j16631k)*(*j14375k),4.0))+((-1.0)*pow((*j16631k)*(*j14375k),5.0)); j13588k+=(((*j10355k)-((*j14375k)*j15952k[j18579k]))*j15952k[j18579k]); j18017k+=pow(j15952k[j18579k],2.0)+(*j18168k); } if(j13114k){ j10428k=std::sqrt(1.0/((j13089k*j18017k)+j14547k[5][j15005k])); j18197k=-((j13089k*j13588k)+(j16328k[5][j15005k]*j14547k[5][j15005k]))*j10428k*j10428k; do { do { j15034k = R::runif(0,1); } while (j15034k == 0.0); j14375k2 = 1.7156 * (R::runif(0,1) - 0.5); j16631k2 = j15034k - 0.449871; j18871k = std::abs(j14375k2) + 0.386595; j16483k = j16631k2*j16631k2 + j18871k*(0.19600*j18871k-0.25472*j16631k2); if (j16483k < 0.27597) { break; } } while ((j16483k > 0.27846) || ((j14375k2*j14375k2) > (-4.0*j15034k*j15034k*std::log(j15034k)))); j14330k=j18197k+(j10428k*(j14375k2/j15034k)); } else { j14330k=(-j13588k/j18017k); } if(std::isinf(j14330k) || std::isnan(j14330k)) j14330k=0; for( unsigned int j18579k = 0; j18579k < j13994k[j19508k].size(); j18579k++ ) { j14202k=&j13994k[j19508k][j18579k]; j16631k=&j17190k[j19508k][j18579k]; j19208k=&j17300k[5][j15005k][*j14202k]; j10355k=&j14561k[*j14202k]; (*j10355k)+=(j14330k-(*j14375k))*j15952k[j18579k]; (*j19208k)[0]+=(pow(j14330k,1.0)-pow(*j14375k,1.0))*pow(*j16631k,1.0); (*j19208k)[1]+=(pow(j14330k,2.0)-pow(*j14375k,2.0))*pow(*j16631k,2.0); (*j19208k)[2]+=(pow(j14330k,3.0)-pow(*j14375k,3.0))*pow(*j16631k,3.0); (*j19208k)[3]+=(pow(j14330k,4.0)-pow(*j14375k,4.0))*pow(*j16631k,4.0); (*j19208k)[4]+=(pow(j14330k,5.0)-pow(*j14375k,5.0))*pow(*j16631k,5.0); } (*j14375k)=j14330k; } } j18168k=&j17938k[6]; for( int j15005k = 0; j15005k < j19543k[6]; j15005k++ ) { for( int j19508k = 0; j19508k < j17147k; j19508k++ ) { j14181k++; j14375k=&j11728k[j14181k]; j13588k=0; j18017k=0; for( unsigned int j18579k = 0; j18579k < j13994k[j19508k].size(); j18579k++ ) { j14202k=&j13994k[j19508k][j18579k]; j16631k=&j17190k[j19508k][j18579k]; j19208k=&j17300k[6][j15005k][*j14202k]; j10355k=&j14561k[*j14202k]; j15952k[j18579k]=((0.001388889)*pow((*j19208k)[0],6.0))+((-0.02083333)*pow((*j19208k)[0],4.0)*pow((*j19208k)[1],1.0))+((-0.008333333)*pow((*j19208k)[0],5.0)*(*j16631k)*(*j14375k))+((0.0625)*pow((*j19208k)[0],2.0)*pow((*j19208k)[1],2.0))+((0.08333333)*pow((*j19208k)[0],3.0)*pow((*j19208k)[1],1.0)*(*j16631k)*(*j14375k))+((-0.02083333)*pow((*j19208k)[1],3.0))+((-0.125)*pow((*j19208k)[0],1.0)*pow((*j19208k)[1],2.0)*(*j16631k)*(*j14375k))+((0.05555556)*pow((*j19208k)[0],3.0)*pow((*j19208k)[2],1.0))+((0.04166667)*pow((*j19208k)[0],4.0)*pow((*j16631k)*(*j14375k),2.0))+((-0.1666667)*pow((*j19208k)[0],1.0)*pow((*j19208k)[1],1.0)*pow((*j19208k)[2],1.0))+((-0.1666667)*pow((*j19208k)[0],2.0)*(*j16631k)*(*j14375k)*pow((*j19208k)[2],1.0))+((-0.25)*pow((*j19208k)[0],2.0)*pow((*j19208k)[1],1.0)*pow((*j16631k)*(*j14375k),2.0))+((0.1666667)*pow((*j19208k)[1],1.0)*pow((*j19208k)[2],1.0)*(*j16631k)*(*j14375k))+((0.125)*pow((*j19208k)[1],2.0)*pow((*j16631k)*(*j14375k),2.0))+((0.05555556)*pow((*j19208k)[2],2.0))+((0.3333333)*pow((*j19208k)[0],1.0)*pow((*j19208k)[2],1.0)*pow((*j16631k)*(*j14375k),2.0))+((-0.125)*pow((*j19208k)[0],2.0)*pow((*j19208k)[3],1.0))+((-0.1666667)*pow((*j19208k)[0],3.0)*pow((*j16631k)*(*j14375k),3.0))+((0.125)*pow((*j19208k)[1],1.0)*pow((*j19208k)[3],1.0))+((0.25)*pow((*j19208k)[0],1.0)*(*j16631k)*(*j14375k)*pow((*j19208k)[3],1.0))+((0.5)*pow((*j19208k)[0],1.0)*pow((*j19208k)[1],1.0)*pow((*j16631k)*(*j14375k),3.0))+((-0.25)*pow((*j16631k)*(*j14375k),2.0)*pow((*j19208k)[3],1.0))+((-0.3333333)*pow((*j19208k)[2],1.0)*pow((*j16631k)*(*j14375k),3.0))+((0.2)*pow((*j19208k)[0],1.0)*pow((*j19208k)[4],1.0))+((0.5)*pow((*j19208k)[0],2.0)*pow((*j16631k)*(*j14375k),4.0))+((-0.2)*(*j16631k)*(*j14375k)*pow((*j19208k)[4],1.0))+((-0.5)*pow((*j19208k)[1],1.0)*pow((*j16631k)*(*j14375k),4.0))+((-0.1666667)*pow((*j19208k)[5],1.0))+((-1.0)*pow((*j19208k)[0],1.0)*pow((*j16631k)*(*j14375k),5.0))+((1.0)*pow((*j16631k)*(*j14375k),6.0)); j13588k+=(((*j10355k)-((*j14375k)*j15952k[j18579k]))*j15952k[j18579k]); j18017k+=pow(j15952k[j18579k],2.0)+(*j18168k); } if(j13114k){ j10428k=std::sqrt(1.0/((j13089k*j18017k)+j14547k[6][j15005k])); j18197k=-((j13089k*j13588k)+(j16328k[6][j15005k]*j14547k[6][j15005k]))*j10428k*j10428k; do { do { j15034k = R::runif(0,1); } while (j15034k == 0.0); j14375k2 = 1.7156 * (R::runif(0,1) - 0.5); j16631k2 = j15034k - 0.449871; j18871k = std::abs(j14375k2) + 0.386595; j16483k = j16631k2*j16631k2 + j18871k*(0.19600*j18871k-0.25472*j16631k2); if (j16483k < 0.27597) { break; } } while ((j16483k > 0.27846) || ((j14375k2*j14375k2) > (-4.0*j15034k*j15034k*std::log(j15034k)))); j14330k=j18197k+(j10428k*(j14375k2/j15034k)); } else { j14330k=(-j13588k/j18017k); } if(std::isinf(j14330k) || std::isnan(j14330k)) j14330k=0; for( unsigned int j18579k = 0; j18579k < j13994k[j19508k].size(); j18579k++ ) { j14202k=&j13994k[j19508k][j18579k]; j16631k=&j17190k[j19508k][j18579k]; j19208k=&j17300k[6][j15005k][*j14202k]; j10355k=&j14561k[*j14202k]; (*j10355k)+=(j14330k-(*j14375k))*j15952k[j18579k]; (*j19208k)[0]+=(pow(j14330k,1.0)-pow(*j14375k,1.0))*pow(*j16631k,1.0); (*j19208k)[1]+=(pow(j14330k,2.0)-pow(*j14375k,2.0))*pow(*j16631k,2.0); (*j19208k)[2]+=(pow(j14330k,3.0)-pow(*j14375k,3.0))*pow(*j16631k,3.0); (*j19208k)[3]+=(pow(j14330k,4.0)-pow(*j14375k,4.0))*pow(*j16631k,4.0); (*j19208k)[4]+=(pow(j14330k,5.0)-pow(*j14375k,5.0))*pow(*j16631k,5.0); (*j19208k)[5]+=(pow(j14330k,6.0)-pow(*j14375k,6.0))*pow(*j16631k,6.0); } (*j14375k)=j14330k; } } j18168k=&j17938k[7]; for( int j15005k = 0; j15005k < j19543k[7]; j15005k++ ) { for( int j19508k = 0; j19508k < j17147k; j19508k++ ) { j14181k++; j14375k=&j11728k[j14181k]; j13588k=0; j18017k=0; for( unsigned int j18579k = 0; j18579k < j13994k[j19508k].size(); j18579k++ ) { j14202k=&j13994k[j19508k][j18579k]; j16631k=&j17190k[j19508k][j18579k]; j19208k=&j17300k[7][j15005k][*j14202k]; j10355k=&j14561k[*j14202k]; j15952k[j18579k]=((0.0001984127)*pow((*j19208k)[0],7.0))+((-0.004166667)*pow((*j19208k)[0],5.0)*pow((*j19208k)[1],1.0))+((-0.001388889)*pow((*j19208k)[0],6.0)*(*j16631k)*(*j14375k))+((0.02083333)*pow((*j19208k)[0],3.0)*pow((*j19208k)[1],2.0))+((0.02083333)*pow((*j19208k)[0],4.0)*pow((*j19208k)[1],1.0)*(*j16631k)*(*j14375k))+((-0.02083333)*pow((*j19208k)[0],1.0)*pow((*j19208k)[1],3.0))+((-0.0625)*pow((*j19208k)[0],2.0)*pow((*j19208k)[1],2.0)*(*j16631k)*(*j14375k))+((0.02083333)*pow((*j19208k)[1],3.0)*(*j16631k)*(*j14375k))+((0.01388889)*pow((*j19208k)[0],4.0)*pow((*j19208k)[2],1.0))+((0.008333333)*pow((*j19208k)[0],5.0)*pow((*j16631k)*(*j14375k),2.0))+((-0.08333333)*pow((*j19208k)[0],2.0)*pow((*j19208k)[1],1.0)*pow((*j19208k)[2],1.0))+((-0.05555556)*pow((*j19208k)[0],3.0)*(*j16631k)*(*j14375k)*pow((*j19208k)[2],1.0))+((-0.08333333)*pow((*j19208k)[0],3.0)*pow((*j19208k)[1],1.0)*pow((*j16631k)*(*j14375k),2.0))+((0.04166667)*pow((*j19208k)[1],2.0)*pow((*j19208k)[2],1.0))+((0.1666667)*pow((*j19208k)[0],1.0)*pow((*j19208k)[1],1.0)*pow((*j19208k)[2],1.0)*(*j16631k)*(*j14375k))+((0.125)*pow((*j19208k)[0],1.0)*pow((*j19208k)[1],2.0)*pow((*j16631k)*(*j14375k),2.0))+((0.05555556)*pow((*j19208k)[0],1.0)*pow((*j19208k)[2],2.0))+((0.1666667)*pow((*j19208k)[0],2.0)*pow((*j19208k)[2],1.0)*pow((*j16631k)*(*j14375k),2.0))+((-0.05555556)*(*j16631k)*(*j14375k)*pow((*j19208k)[2],2.0))+((-0.1666667)*pow((*j19208k)[1],1.0)*pow((*j19208k)[2],1.0)*pow((*j16631k)*(*j14375k),2.0))+((-0.04166667)*pow((*j19208k)[0],3.0)*pow((*j19208k)[3],1.0))+((-0.04166667)*pow((*j19208k)[0],4.0)*pow((*j16631k)*(*j14375k),3.0))+((0.125)*pow((*j19208k)[0],1.0)*pow((*j19208k)[1],1.0)*pow((*j19208k)[3],1.0))+((0.125)*pow((*j19208k)[0],2.0)*(*j16631k)*(*j14375k)*pow((*j19208k)[3],1.0))+((0.25)*pow((*j19208k)[0],2.0)*pow((*j19208k)[1],1.0)*pow((*j16631k)*(*j14375k),3.0))+((-0.125)*pow((*j19208k)[1],1.0)*pow((*j19208k)[3],1.0)*(*j16631k)*(*j14375k))+((-0.125)*pow((*j19208k)[1],2.0)*pow((*j16631k)*(*j14375k),3.0))+((-0.08333333)*pow((*j19208k)[2],1.0)*pow((*j19208k)[3],1.0))+((-0.25)*pow((*j19208k)[0],1.0)*pow((*j16631k)*(*j14375k),2.0)*pow((*j19208k)[3],1.0))+((-0.3333333)*pow((*j19208k)[0],1.0)*pow((*j19208k)[2],1.0)*pow((*j16631k)*(*j14375k),3.0))+((0.25)*pow((*j19208k)[3],1.0)*pow((*j16631k)*(*j14375k),3.0))+((0.1)*pow((*j19208k)[0],2.0)*pow((*j19208k)[4],1.0))+((0.1666667)*pow((*j19208k)[0],3.0)*pow((*j16631k)*(*j14375k),4.0))+((-0.1)*pow((*j19208k)[1],1.0)*pow((*j19208k)[4],1.0))+((-0.2)*pow((*j19208k)[0],1.0)*(*j16631k)*(*j14375k)*pow((*j19208k)[4],1.0))+((-0.5)*pow((*j19208k)[0],1.0)*pow((*j19208k)[1],1.0)*pow((*j16631k)*(*j14375k),4.0))+((0.2)*pow((*j16631k)*(*j14375k),2.0)*pow((*j19208k)[4],1.0))+((0.3333333)*pow((*j19208k)[2],1.0)*pow((*j16631k)*(*j14375k),4.0))+((-0.1666667)*pow((*j19208k)[0],1.0)*pow((*j19208k)[5],1.0))+((-0.5)*pow((*j19208k)[0],2.0)*pow((*j16631k)*(*j14375k),5.0))+((0.1666667)*(*j16631k)*(*j14375k)*pow((*j19208k)[5],1.0))+((0.5)*pow((*j19208k)[1],1.0)*pow((*j16631k)*(*j14375k),5.0))+((0.1428571)*pow((*j19208k)[6],1.0))+((1.0)*pow((*j19208k)[0],1.0)*pow((*j16631k)*(*j14375k),6.0))+((-1.0)*pow((*j16631k)*(*j14375k),7.0)); j13588k+=(((*j10355k)-((*j14375k)*j15952k[j18579k]))*j15952k[j18579k]); j18017k+=pow(j15952k[j18579k],2.0)+(*j18168k); } if(j13114k){ j10428k=std::sqrt(1.0/((j13089k*j18017k)+j14547k[7][j15005k])); j18197k=-((j13089k*j13588k)+(j16328k[7][j15005k]*j14547k[7][j15005k]))*j10428k*j10428k; do { do { j15034k = R::runif(0,1); } while (j15034k == 0.0); j14375k2 = 1.7156 * (R::runif(0,1) - 0.5); j16631k2 = j15034k - 0.449871; j18871k = std::abs(j14375k2) + 0.386595; j16483k = j16631k2*j16631k2 + j18871k*(0.19600*j18871k-0.25472*j16631k2); if (j16483k < 0.27597) { break; } } while ((j16483k > 0.27846) || ((j14375k2*j14375k2) > (-4.0*j15034k*j15034k*std::log(j15034k)))); j14330k=j18197k+(j10428k*(j14375k2/j15034k)); } else { j14330k=(-j13588k/j18017k); } if(std::isinf(j14330k) || std::isnan(j14330k)) j14330k=0; for( unsigned int j18579k = 0; j18579k < j13994k[j19508k].size(); j18579k++ ) { j14202k=&j13994k[j19508k][j18579k]; j16631k=&j17190k[j19508k][j18579k]; j19208k=&j17300k[7][j15005k][*j14202k]; j10355k=&j14561k[*j14202k]; (*j10355k)+=(j14330k-(*j14375k))*j15952k[j18579k]; (*j19208k)[0]+=(pow(j14330k,1.0)-pow(*j14375k,1.0))*pow(*j16631k,1.0); (*j19208k)[1]+=(pow(j14330k,2.0)-pow(*j14375k,2.0))*pow(*j16631k,2.0); (*j19208k)[2]+=(pow(j14330k,3.0)-pow(*j14375k,3.0))*pow(*j16631k,3.0); (*j19208k)[3]+=(pow(j14330k,4.0)-pow(*j14375k,4.0))*pow(*j16631k,4.0); (*j19208k)[4]+=(pow(j14330k,5.0)-pow(*j14375k,5.0))*pow(*j16631k,5.0); (*j19208k)[5]+=(pow(j14330k,6.0)-pow(*j14375k,6.0))*pow(*j16631k,6.0); (*j19208k)[6]+=(pow(j14330k,7.0)-pow(*j14375k,7.0))*pow(*j16631k,7.0); } (*j14375k)=j14330k; } } j18168k=&j17938k[8]; for( int j15005k = 0; j15005k < j19543k[8]; j15005k++ ) { for( int j19508k = 0; j19508k < j17147k; j19508k++ ) { j14181k++; j14375k=&j11728k[j14181k]; j13588k=0; j18017k=0; for( unsigned int j18579k = 0; j18579k < j13994k[j19508k].size(); j18579k++ ) { j14202k=&j13994k[j19508k][j18579k]; j16631k=&j17190k[j19508k][j18579k]; j19208k=&j17300k[8][j15005k][*j14202k]; j10355k=&j14561k[*j14202k]; j15952k[j18579k]=((2.480159e-05)*pow((*j19208k)[0],8.0))+((-0.0006944444)*pow((*j19208k)[0],6.0)*pow((*j19208k)[1],1.0))+((-0.0001984127)*pow((*j19208k)[0],7.0)*(*j16631k)*(*j14375k))+((0.005208333)*pow((*j19208k)[0],4.0)*pow((*j19208k)[1],2.0))+((0.004166667)*pow((*j19208k)[0],5.0)*pow((*j19208k)[1],1.0)*(*j16631k)*(*j14375k))+((-0.01041667)*pow((*j19208k)[0],2.0)*pow((*j19208k)[1],3.0))+((-0.02083333)*pow((*j19208k)[0],3.0)*pow((*j19208k)[1],2.0)*(*j16631k)*(*j14375k))+((0.002604167)*pow((*j19208k)[1],4.0))+((0.02083333)*pow((*j19208k)[0],1.0)*pow((*j19208k)[1],3.0)*(*j16631k)*(*j14375k))+((0.002777778)*pow((*j19208k)[0],5.0)*pow((*j19208k)[2],1.0))+((0.001388889)*pow((*j19208k)[0],6.0)*pow((*j16631k)*(*j14375k),2.0))+((-0.02777778)*pow((*j19208k)[0],3.0)*pow((*j19208k)[1],1.0)*pow((*j19208k)[2],1.0))+((-0.01388889)*pow((*j19208k)[0],4.0)*(*j16631k)*(*j14375k)*pow((*j19208k)[2],1.0))+((-0.02083333)*pow((*j19208k)[0],4.0)*pow((*j19208k)[1],1.0)*pow((*j16631k)*(*j14375k),2.0))+((0.04166667)*pow((*j19208k)[0],1.0)*pow((*j19208k)[1],2.0)*pow((*j19208k)[2],1.0))+((0.08333333)*pow((*j19208k)[0],2.0)*pow((*j19208k)[1],1.0)*pow((*j19208k)[2],1.0)*(*j16631k)*(*j14375k))+((0.0625)*pow((*j19208k)[0],2.0)*pow((*j19208k)[1],2.0)*pow((*j16631k)*(*j14375k),2.0))+((-0.04166667)*pow((*j19208k)[1],2.0)*pow((*j19208k)[2],1.0)*(*j16631k)*(*j14375k))+((-0.02083333)*pow((*j19208k)[1],3.0)*pow((*j16631k)*(*j14375k),2.0))+((0.02777778)*pow((*j19208k)[0],2.0)*pow((*j19208k)[2],2.0))+((0.05555556)*pow((*j19208k)[0],3.0)*pow((*j19208k)[2],1.0)*pow((*j16631k)*(*j14375k),2.0))+((-0.02777778)*pow((*j19208k)[1],1.0)*pow((*j19208k)[2],2.0))+((-0.05555556)*pow((*j19208k)[0],1.0)*(*j16631k)*(*j14375k)*pow((*j19208k)[2],2.0))+((-0.1666667)*pow((*j19208k)[0],1.0)*pow((*j19208k)[1],1.0)*pow((*j19208k)[2],1.0)*pow((*j16631k)*(*j14375k),2.0))+((0.05555556)*pow((*j19208k)[2],2.0)*pow((*j16631k)*(*j14375k),2.0))+((-0.01041667)*pow((*j19208k)[0],4.0)*pow((*j19208k)[3],1.0))+((-0.008333333)*pow((*j19208k)[0],5.0)*pow((*j16631k)*(*j14375k),3.0))+((0.0625)*pow((*j19208k)[0],2.0)*pow((*j19208k)[1],1.0)*pow((*j19208k)[3],1.0))+((0.04166667)*pow((*j19208k)[0],3.0)*(*j16631k)*(*j14375k)*pow((*j19208k)[3],1.0))+((0.08333333)*pow((*j19208k)[0],3.0)*pow((*j19208k)[1],1.0)*pow((*j16631k)*(*j14375k),3.0))+((-0.03125)*pow((*j19208k)[1],2.0)*pow((*j19208k)[3],1.0))+((-0.125)*pow((*j19208k)[0],1.0)*pow((*j19208k)[1],1.0)*pow((*j19208k)[3],1.0)*(*j16631k)*(*j14375k))+((-0.125)*pow((*j19208k)[0],1.0)*pow((*j19208k)[1],2.0)*pow((*j16631k)*(*j14375k),3.0))+((-0.08333333)*pow((*j19208k)[0],1.0)*pow((*j19208k)[2],1.0)*pow((*j19208k)[3],1.0))+((-0.125)*pow((*j19208k)[0],2.0)*pow((*j16631k)*(*j14375k),2.0)*pow((*j19208k)[3],1.0))+((-0.1666667)*pow((*j19208k)[0],2.0)*pow((*j19208k)[2],1.0)*pow((*j16631k)*(*j14375k),3.0))+((0.08333333)*(*j16631k)*(*j14375k)*pow((*j19208k)[2],1.0)*pow((*j19208k)[3],1.0))+((0.125)*pow((*j19208k)[1],1.0)*pow((*j16631k)*(*j14375k),2.0)*pow((*j19208k)[3],1.0))+((0.1666667)*pow((*j19208k)[1],1.0)*pow((*j19208k)[2],1.0)*pow((*j16631k)*(*j14375k),3.0))+((0.03125)*pow((*j19208k)[3],2.0))+((0.25)*pow((*j19208k)[0],1.0)*pow((*j19208k)[3],1.0)*pow((*j16631k)*(*j14375k),3.0))+((0.03333333)*pow((*j19208k)[0],3.0)*pow((*j19208k)[4],1.0))+((0.04166667)*pow((*j19208k)[0],4.0)*pow((*j16631k)*(*j14375k),4.0))+((-0.1)*pow((*j19208k)[0],1.0)*pow((*j19208k)[1],1.0)*pow((*j19208k)[4],1.0))+((-0.1)*pow((*j19208k)[0],2.0)*(*j16631k)*(*j14375k)*pow((*j19208k)[4],1.0))+((-0.25)*pow((*j19208k)[0],2.0)*pow((*j19208k)[1],1.0)*pow((*j16631k)*(*j14375k),4.0))+((0.1)*pow((*j19208k)[1],1.0)*pow((*j19208k)[4],1.0)*(*j16631k)*(*j14375k))+((0.125)*pow((*j19208k)[1],2.0)*pow((*j16631k)*(*j14375k),4.0))+((0.06666667)*pow((*j19208k)[2],1.0)*pow((*j19208k)[4],1.0))+((0.2)*pow((*j19208k)[0],1.0)*pow((*j16631k)*(*j14375k),2.0)*pow((*j19208k)[4],1.0))+((0.3333333)*pow((*j19208k)[0],1.0)*pow((*j19208k)[2],1.0)*pow((*j16631k)*(*j14375k),4.0))+((-0.2)*pow((*j16631k)*(*j14375k),3.0)*pow((*j19208k)[4],1.0))+((-0.25)*pow((*j19208k)[3],1.0)*pow((*j16631k)*(*j14375k),4.0))+((-0.08333333)*pow((*j19208k)[0],2.0)*pow((*j19208k)[5],1.0))+((-0.1666667)*pow((*j19208k)[0],3.0)*pow((*j16631k)*(*j14375k),5.0))+((0.08333333)*pow((*j19208k)[1],1.0)*pow((*j19208k)[5],1.0))+((0.1666667)*pow((*j19208k)[0],1.0)*(*j16631k)*(*j14375k)*pow((*j19208k)[5],1.0))+((0.5)*pow((*j19208k)[0],1.0)*pow((*j19208k)[1],1.0)*pow((*j16631k)*(*j14375k),5.0))+((-0.1666667)*pow((*j16631k)*(*j14375k),2.0)*pow((*j19208k)[5],1.0))+((-0.3333333)*pow((*j19208k)[2],1.0)*pow((*j16631k)*(*j14375k),5.0))+((0.1428571)*pow((*j19208k)[0],1.0)*pow((*j19208k)[6],1.0))+((0.5)*pow((*j19208k)[0],2.0)*pow((*j16631k)*(*j14375k),6.0))+((-0.1428571)*(*j16631k)*(*j14375k)*pow((*j19208k)[6],1.0))+((-0.5)*pow((*j19208k)[1],1.0)*pow((*j16631k)*(*j14375k),6.0))+((-0.125)*pow((*j19208k)[7],1.0))+((-1.0)*pow((*j19208k)[0],1.0)*pow((*j16631k)*(*j14375k),7.0))+((1.0)*pow((*j16631k)*(*j14375k),8.0)); j13588k+=(((*j10355k)-((*j14375k)*j15952k[j18579k]))*j15952k[j18579k]); j18017k+=pow(j15952k[j18579k],2.0)+(*j18168k); } if(j13114k){ j10428k=std::sqrt(1.0/((j13089k*j18017k)+j14547k[8][j15005k])); j18197k=-((j13089k*j13588k)+(j16328k[8][j15005k]*j14547k[8][j15005k]))*j10428k*j10428k; do { do { j15034k = R::runif(0,1); } while (j15034k == 0.0); j14375k2 = 1.7156 * (R::runif(0,1) - 0.5); j16631k2 = j15034k - 0.449871; j18871k = std::abs(j14375k2) + 0.386595; j16483k = j16631k2*j16631k2 + j18871k*(0.19600*j18871k-0.25472*j16631k2); if (j16483k < 0.27597) { break; } } while ((j16483k > 0.27846) || ((j14375k2*j14375k2) > (-4.0*j15034k*j15034k*std::log(j15034k)))); j14330k=j18197k+(j10428k*(j14375k2/j15034k)); } else { j14330k=(-j13588k/j18017k); } if(std::isinf(j14330k) || std::isnan(j14330k)) j14330k=0; for( unsigned int j18579k = 0; j18579k < j13994k[j19508k].size(); j18579k++ ) { j14202k=&j13994k[j19508k][j18579k]; j16631k=&j17190k[j19508k][j18579k]; j19208k=&j17300k[8][j15005k][*j14202k]; j10355k=&j14561k[*j14202k]; (*j10355k)+=(j14330k-(*j14375k))*j15952k[j18579k]; (*j19208k)[0]+=(pow(j14330k,1.0)-pow(*j14375k,1.0))*pow(*j16631k,1.0); (*j19208k)[1]+=(pow(j14330k,2.0)-pow(*j14375k,2.0))*pow(*j16631k,2.0); (*j19208k)[2]+=(pow(j14330k,3.0)-pow(*j14375k,3.0))*pow(*j16631k,3.0); (*j19208k)[3]+=(pow(j14330k,4.0)-pow(*j14375k,4.0))*pow(*j16631k,4.0); (*j19208k)[4]+=(pow(j14330k,5.0)-pow(*j14375k,5.0))*pow(*j16631k,5.0); (*j19208k)[5]+=(pow(j14330k,6.0)-pow(*j14375k,6.0))*pow(*j16631k,6.0); (*j19208k)[6]+=(pow(j14330k,7.0)-pow(*j14375k,7.0))*pow(*j16631k,7.0); (*j19208k)[7]+=(pow(j14330k,8.0)-pow(*j14375k,8.0))*pow(*j16631k,8.0); } (*j14375k)=j14330k; } } j18168k=&j17938k[9]; for( int j15005k = 0; j15005k < j19543k[9]; j15005k++ ) { for( int j19508k = 0; j19508k < j17147k; j19508k++ ) { j14181k++; j14375k=&j11728k[j14181k]; j13588k=0; j18017k=0; for( unsigned int j18579k = 0; j18579k < j13994k[j19508k].size(); j18579k++ ) { j14202k=&j13994k[j19508k][j18579k]; j16631k=&j17190k[j19508k][j18579k]; j19208k=&j17300k[9][j15005k][*j14202k]; j10355k=&j14561k[*j14202k]; j15952k[j18579k]=((2.755732e-06)*pow((*j19208k)[0],9.0))+((-9.920635e-05)*pow((*j19208k)[0],7.0)*pow((*j19208k)[1],1.0))+((-2.480159e-05)*pow((*j19208k)[0],8.0)*(*j16631k)*(*j14375k))+((0.001041667)*pow((*j19208k)[0],5.0)*pow((*j19208k)[1],2.0))+((0.0006944444)*pow((*j19208k)[0],6.0)*pow((*j19208k)[1],1.0)*(*j16631k)*(*j14375k))+((-0.003472222)*pow((*j19208k)[0],3.0)*pow((*j19208k)[1],3.0))+((-0.005208333)*pow((*j19208k)[0],4.0)*pow((*j19208k)[1],2.0)*(*j16631k)*(*j14375k))+((0.002604167)*pow((*j19208k)[0],1.0)*pow((*j19208k)[1],4.0))+((0.01041667)*pow((*j19208k)[0],2.0)*pow((*j19208k)[1],3.0)*(*j16631k)*(*j14375k))+((-0.002604167)*pow((*j19208k)[1],4.0)*(*j16631k)*(*j14375k))+((0.000462963)*pow((*j19208k)[0],6.0)*pow((*j19208k)[2],1.0))+((0.0001984127)*pow((*j19208k)[0],7.0)*pow((*j16631k)*(*j14375k),2.0))+((-0.006944444)*pow((*j19208k)[0],4.0)*pow((*j19208k)[1],1.0)*pow((*j19208k)[2],1.0))+((-0.002777778)*pow((*j19208k)[0],5.0)*(*j16631k)*(*j14375k)*pow((*j19208k)[2],1.0))+((-0.004166667)*pow((*j19208k)[0],5.0)*pow((*j19208k)[1],1.0)*pow((*j16631k)*(*j14375k),2.0))+((0.02083333)*pow((*j19208k)[0],2.0)*pow((*j19208k)[1],2.0)*pow((*j19208k)[2],1.0))+((0.02777778)*pow((*j19208k)[0],3.0)*pow((*j19208k)[1],1.0)*pow((*j19208k)[2],1.0)*(*j16631k)*(*j14375k))+((0.02083333)*pow((*j19208k)[0],3.0)*pow((*j19208k)[1],2.0)*pow((*j16631k)*(*j14375k),2.0))+((-0.006944444)*pow((*j19208k)[1],3.0)*pow((*j19208k)[2],1.0))+((-0.04166667)*pow((*j19208k)[0],1.0)*pow((*j19208k)[1],2.0)*pow((*j19208k)[2],1.0)*(*j16631k)*(*j14375k))+((-0.02083333)*pow((*j19208k)[0],1.0)*pow((*j19208k)[1],3.0)*pow((*j16631k)*(*j14375k),2.0))+((0.009259259)*pow((*j19208k)[0],3.0)*pow((*j19208k)[2],2.0))+((0.01388889)*pow((*j19208k)[0],4.0)*pow((*j19208k)[2],1.0)*pow((*j16631k)*(*j14375k),2.0))+((-0.02777778)*pow((*j19208k)[0],1.0)*pow((*j19208k)[1],1.0)*pow((*j19208k)[2],2.0))+((-0.02777778)*pow((*j19208k)[0],2.0)*(*j16631k)*(*j14375k)*pow((*j19208k)[2],2.0))+((-0.08333333)*pow((*j19208k)[0],2.0)*pow((*j19208k)[1],1.0)*pow((*j19208k)[2],1.0)*pow((*j16631k)*(*j14375k),2.0))+((0.02777778)*pow((*j19208k)[1],1.0)*pow((*j19208k)[2],2.0)*(*j16631k)*(*j14375k))+((0.04166667)*pow((*j19208k)[1],2.0)*pow((*j19208k)[2],1.0)*pow((*j16631k)*(*j14375k),2.0))+((0.00617284)*pow((*j19208k)[2],3.0))+((0.05555556)*pow((*j19208k)[0],1.0)*pow((*j19208k)[2],2.0)*pow((*j16631k)*(*j14375k),2.0))+((-0.002083333)*pow((*j19208k)[0],5.0)*pow((*j19208k)[3],1.0))+((-0.001388889)*pow((*j19208k)[0],6.0)*pow((*j16631k)*(*j14375k),3.0))+((0.02083333)*pow((*j19208k)[0],3.0)*pow((*j19208k)[1],1.0)*pow((*j19208k)[3],1.0))+((0.01041667)*pow((*j19208k)[0],4.0)*(*j16631k)*(*j14375k)*pow((*j19208k)[3],1.0))+((0.02083333)*pow((*j19208k)[0],4.0)*pow((*j19208k)[1],1.0)*pow((*j16631k)*(*j14375k),3.0))+((-0.03125)*pow((*j19208k)[0],1.0)*pow((*j19208k)[1],2.0)*pow((*j19208k)[3],1.0))+((-0.0625)*pow((*j19208k)[0],2.0)*pow((*j19208k)[1],1.0)*pow((*j19208k)[3],1.0)*(*j16631k)*(*j14375k))+((-0.0625)*pow((*j19208k)[0],2.0)*pow((*j19208k)[1],2.0)*pow((*j16631k)*(*j14375k),3.0))+((0.03125)*pow((*j19208k)[1],2.0)*pow((*j19208k)[3],1.0)*(*j16631k)*(*j14375k))+((0.02083333)*pow((*j19208k)[1],3.0)*pow((*j16631k)*(*j14375k),3.0))+((-0.04166667)*pow((*j19208k)[0],2.0)*pow((*j19208k)[2],1.0)*pow((*j19208k)[3],1.0))+((-0.04166667)*pow((*j19208k)[0],3.0)*pow((*j16631k)*(*j14375k),2.0)*pow((*j19208k)[3],1.0))+((-0.05555556)*pow((*j19208k)[0],3.0)*pow((*j19208k)[2],1.0)*pow((*j16631k)*(*j14375k),3.0))+((0.04166667)*pow((*j19208k)[1],1.0)*pow((*j19208k)[2],1.0)*pow((*j19208k)[3],1.0))+((0.08333333)*pow((*j19208k)[0],1.0)*(*j16631k)*(*j14375k)*pow((*j19208k)[2],1.0)*pow((*j19208k)[3],1.0))+((0.125)*pow((*j19208k)[0],1.0)*pow((*j19208k)[1],1.0)*pow((*j16631k)*(*j14375k),2.0)*pow((*j19208k)[3],1.0))+((0.1666667)*pow((*j19208k)[0],1.0)*pow((*j19208k)[1],1.0)*pow((*j19208k)[2],1.0)*pow((*j16631k)*(*j14375k),3.0))+((-0.08333333)*pow((*j19208k)[2],1.0)*pow((*j19208k)[3],1.0)*pow((*j16631k)*(*j14375k),2.0))+((-0.05555556)*pow((*j19208k)[2],2.0)*pow((*j16631k)*(*j14375k),3.0))+((0.03125)*pow((*j19208k)[0],1.0)*pow((*j19208k)[3],2.0))+((0.125)*pow((*j19208k)[0],2.0)*pow((*j19208k)[3],1.0)*pow((*j16631k)*(*j14375k),3.0))+((-0.03125)*(*j16631k)*(*j14375k)*pow((*j19208k)[3],2.0))+((-0.125)*pow((*j19208k)[1],1.0)*pow((*j19208k)[3],1.0)*pow((*j16631k)*(*j14375k),3.0))+((0.008333333)*pow((*j19208k)[0],4.0)*pow((*j19208k)[4],1.0))+((0.008333333)*pow((*j19208k)[0],5.0)*pow((*j16631k)*(*j14375k),4.0))+((-0.05)*pow((*j19208k)[0],2.0)*pow((*j19208k)[1],1.0)*pow((*j19208k)[4],1.0))+((-0.03333333)*pow((*j19208k)[0],3.0)*(*j16631k)*(*j14375k)*pow((*j19208k)[4],1.0))+((-0.08333333)*pow((*j19208k)[0],3.0)*pow((*j19208k)[1],1.0)*pow((*j16631k)*(*j14375k),4.0))+((0.025)*pow((*j19208k)[1],2.0)*pow((*j19208k)[4],1.0))+((0.1)*pow((*j19208k)[0],1.0)*pow((*j19208k)[1],1.0)*pow((*j19208k)[4],1.0)*(*j16631k)*(*j14375k))+((0.125)*pow((*j19208k)[0],1.0)*pow((*j19208k)[1],2.0)*pow((*j16631k)*(*j14375k),4.0))+((0.06666667)*pow((*j19208k)[0],1.0)*pow((*j19208k)[2],1.0)*pow((*j19208k)[4],1.0))+((0.1)*pow((*j19208k)[0],2.0)*pow((*j16631k)*(*j14375k),2.0)*pow((*j19208k)[4],1.0))+((0.1666667)*pow((*j19208k)[0],2.0)*pow((*j19208k)[2],1.0)*pow((*j16631k)*(*j14375k),4.0))+((-0.06666667)*(*j16631k)*(*j14375k)*pow((*j19208k)[2],1.0)*pow((*j19208k)[4],1.0))+((-0.1)*pow((*j19208k)[1],1.0)*pow((*j16631k)*(*j14375k),2.0)*pow((*j19208k)[4],1.0))+((-0.1666667)*pow((*j19208k)[1],1.0)*pow((*j19208k)[2],1.0)*pow((*j16631k)*(*j14375k),4.0))+((-0.05)*pow((*j19208k)[3],1.0)*pow((*j19208k)[4],1.0))+((-0.2)*pow((*j19208k)[0],1.0)*pow((*j16631k)*(*j14375k),3.0)*pow((*j19208k)[4],1.0))+((-0.25)*pow((*j19208k)[0],1.0)*pow((*j19208k)[3],1.0)*pow((*j16631k)*(*j14375k),4.0))+((0.2)*pow((*j19208k)[4],1.0)*pow((*j16631k)*(*j14375k),4.0))+((-0.02777778)*pow((*j19208k)[0],3.0)*pow((*j19208k)[5],1.0))+((-0.04166667)*pow((*j19208k)[0],4.0)*pow((*j16631k)*(*j14375k),5.0))+((0.08333333)*pow((*j19208k)[0],1.0)*pow((*j19208k)[1],1.0)*pow((*j19208k)[5],1.0))+((0.08333333)*pow((*j19208k)[0],2.0)*(*j16631k)*(*j14375k)*pow((*j19208k)[5],1.0))+((0.25)*pow((*j19208k)[0],2.0)*pow((*j19208k)[1],1.0)*pow((*j16631k)*(*j14375k),5.0))+((-0.08333333)*pow((*j19208k)[1],1.0)*pow((*j19208k)[5],1.0)*(*j16631k)*(*j14375k))+((-0.125)*pow((*j19208k)[1],2.0)*pow((*j16631k)*(*j14375k),5.0))+((-0.05555556)*pow((*j19208k)[2],1.0)*pow((*j19208k)[5],1.0))+((-0.1666667)*pow((*j19208k)[0],1.0)*pow((*j16631k)*(*j14375k),2.0)*pow((*j19208k)[5],1.0))+((-0.3333333)*pow((*j19208k)[0],1.0)*pow((*j19208k)[2],1.0)*pow((*j16631k)*(*j14375k),5.0))+((0.1666667)*pow((*j16631k)*(*j14375k),3.0)*pow((*j19208k)[5],1.0))+((0.25)*pow((*j19208k)[3],1.0)*pow((*j16631k)*(*j14375k),5.0))+((0.07142857)*pow((*j19208k)[0],2.0)*pow((*j19208k)[6],1.0))+((0.1666667)*pow((*j19208k)[0],3.0)*pow((*j16631k)*(*j14375k),6.0))+((-0.07142857)*pow((*j19208k)[1],1.0)*pow((*j19208k)[6],1.0))+((-0.1428571)*pow((*j19208k)[0],1.0)*(*j16631k)*(*j14375k)*pow((*j19208k)[6],1.0))+((-0.5)*pow((*j19208k)[0],1.0)*pow((*j19208k)[1],1.0)*pow((*j16631k)*(*j14375k),6.0))+((0.1428571)*pow((*j16631k)*(*j14375k),2.0)*pow((*j19208k)[6],1.0))+((0.3333333)*pow((*j19208k)[2],1.0)*pow((*j16631k)*(*j14375k),6.0))+((-0.125)*pow((*j19208k)[0],1.0)*pow((*j19208k)[7],1.0))+((-0.5)*pow((*j19208k)[0],2.0)*pow((*j16631k)*(*j14375k),7.0))+((0.125)*(*j16631k)*(*j14375k)*pow((*j19208k)[7],1.0))+((0.5)*pow((*j19208k)[1],1.0)*pow((*j16631k)*(*j14375k),7.0))+((0.1111111)*pow((*j19208k)[8],1.0))+((1.0)*pow((*j19208k)[0],1.0)*pow((*j16631k)*(*j14375k),8.0))+((-1.0)*pow((*j16631k)*(*j14375k),9.0)); j13588k+=(((*j10355k)-((*j14375k)*j15952k[j18579k]))*j15952k[j18579k]); j18017k+=pow(j15952k[j18579k],2.0)+(*j18168k); } if(j13114k){ j10428k=std::sqrt(1.0/((j13089k*j18017k)+j14547k[9][j15005k])); j18197k=-((j13089k*j13588k)+(j16328k[9][j15005k]*j14547k[9][j15005k]))*j10428k*j10428k; do { do { j15034k = R::runif(0,1); } while (j15034k == 0.0); j14375k2 = 1.7156 * (R::runif(0,1) - 0.5); j16631k2 = j15034k - 0.449871; j18871k = std::abs(j14375k2) + 0.386595; j16483k = j16631k2*j16631k2 + j18871k*(0.19600*j18871k-0.25472*j16631k2); if (j16483k < 0.27597) { break; } } while ((j16483k > 0.27846) || ((j14375k2*j14375k2) > (-4.0*j15034k*j15034k*std::log(j15034k)))); j14330k=j18197k+(j10428k*(j14375k2/j15034k)); } else { j14330k=(-j13588k/j18017k); } if(std::isinf(j14330k) || std::isnan(j14330k)) j14330k=0; for( unsigned int j18579k = 0; j18579k < j13994k[j19508k].size(); j18579k++ ) { j14202k=&j13994k[j19508k][j18579k]; j16631k=&j17190k[j19508k][j18579k]; j19208k=&j17300k[9][j15005k][*j14202k]; j10355k=&j14561k[*j14202k]; (*j10355k)+=(j14330k-(*j14375k))*j15952k[j18579k]; (*j19208k)[0]+=(pow(j14330k,1.0)-pow(*j14375k,1.0))*pow(*j16631k,1.0); (*j19208k)[1]+=(pow(j14330k,2.0)-pow(*j14375k,2.0))*pow(*j16631k,2.0); (*j19208k)[2]+=(pow(j14330k,3.0)-pow(*j14375k,3.0))*pow(*j16631k,3.0); (*j19208k)[3]+=(pow(j14330k,4.0)-pow(*j14375k,4.0))*pow(*j16631k,4.0); (*j19208k)[4]+=(pow(j14330k,5.0)-pow(*j14375k,5.0))*pow(*j16631k,5.0); (*j19208k)[5]+=(pow(j14330k,6.0)-pow(*j14375k,6.0))*pow(*j16631k,6.0); (*j19208k)[6]+=(pow(j14330k,7.0)-pow(*j14375k,7.0))*pow(*j16631k,7.0); (*j19208k)[7]+=(pow(j14330k,8.0)-pow(*j14375k,8.0))*pow(*j16631k,8.0); (*j19208k)[8]+=(pow(j14330k,9.0)-pow(*j14375k,9.0))*pow(*j16631k,9.0); } (*j14375k)=j14330k; } } if(j13114k){ if(!(j11470k<(j10403k/2))){ for(unsigned int j17775k=0;j17775k<j11728k.size();j17775k++) j12465k[j17775k]+=j11728k[j17775k]; j11146k+=1; } } } if(j13114k)  for(unsigned int j17775k=0;j17775k<j11728k.size();j17775k++) j11728k[j17775k]=j12465k[j17775k]/j11146k; for(unsigned int j17775k=j19543k.size()-1;j17775k>0;j17775k--) if(j19543k[j17775k]==0) j19543k.resize(j17775k); else break; List j10009k=Rcpp::List::create(Rcpp::Named("weights") = j11728k, Rcpp::Named("factors") = j19543k, Rcpp::Named("variables") = j17147k, Rcpp::Named("traincases") = j19276k, Rcpp::Named("min.target") = j17261k, Rcpp::Named("max.target") = j15726k); j10009k.attr("class") = "FMmodel"; return j10009k; }
// [[Rcpp::export]]
NumericVector predictFM(List j11161k) { NumericMatrix j10340k = as< NumericMatrix >(j11161k["mX"]); std::vector<int> j19543k = as< std::vector<int> >(j11161k["factors"]); std::vector<double> j11728k = as< std::vector<double> >(j11161k["weights"]); bool j19745k=(j11161k["truncate"]); double j17261k=(j11161k["min.target"]); double j15726k=(j11161k["max.target"]); int j17147k=(j11161k["variables"]); int j19276k=(j11161k["traincases"]); std::vector<double>* j19208k; int j11722k=j19543k.size(); int *j14202k; double* j16631k; double* j14375k; int j14181k; std::vector< std::vector<int> >j13994k(j17147k); std::vector< std::vector<double> >j17190k(j17147k); for(int j18579k = 0; j18579k < j10340k.nrow(); j18579k++ ){ j13994k[j10340k(j18579k,1)].push_back(j10340k(j18579k,0)); j17190k[j10340k(j18579k,1)].push_back(j10340k(j18579k,2)); } std::vector< std::vector< std::vector< std::vector<double> > > > j17300k; j17300k.resize(j11722k); for(int j17775k = 0; j17775k < j11722k; j17775k++ ) { j17300k[j17775k].resize(j19543k[j17775k]); for(int j15275k = 0; j15275k < j19543k[j17775k]; j15275k++ ) { j17300k[j17775k][j15275k].resize(j19276k); for(int j19251k = 0; j19251k < j19276k; j19251k++ ){ j17300k[j17775k][j15275k][j19251k].resize(j17775k+1); for(int j11767k = 0; j11767k < j17775k+1; j11767k++ ) j17300k[j17775k][j15275k][j19251k][j11767k]=0; } } } for(unsigned int j17775k = 0; j17775k < j17300k.size(); j17775k++ ) { for(unsigned int j15275k = 0; j15275k < j17300k[j17775k].size(); j15275k++ ) { for(unsigned int j19251k = 0; j19251k < j17300k[j17775k][j15275k].size(); j19251k++ ){ for(unsigned int j11767k = 0; j11767k < j17300k[j17775k][j15275k][j19251k].size(); j11767k++ ) j17300k[j17775k][j15275k][j19251k][j11767k]=0; } } } j14181k=0; for(int j13914k = 0; j13914k < j11722k; j13914k++ ) { for( int j15005k = 0; j15005k < j19543k[j13914k]; j15005k++ ) { for( int j19508k = 0; j19508k < j17147k; j19508k++ ) { j14181k++; j14375k=&j11728k[j14181k]; for( unsigned int j18579k = 0; j18579k < j13994k[j19508k].size(); j18579k++ ) { j14202k=&j13994k[j19508k][j18579k]; j16631k=&j17190k[j19508k][j18579k]; j19208k=&j17300k[j13914k][j15005k][*j14202k]; for( unsigned int j17025k = 1; j17025k <= (*j19208k).size(); j17025k++ ) { (*j19208k)[j17025k-1]+=pow(*j16631k,(double) j17025k)*pow(*j14375k,(double) j17025k); } } } } } NumericVector j12706k(j19276k,j11728k[0]); std::vector< std::vector<double> >* j17370k; for(int j13914k = 0; j13914k < j11722k; j13914k++ ) { for( int j15005k = 0; j15005k < j19543k[j13914k]; j15005k++ ) { j17370k=&j17300k[j13914k][j15005k]; if(j13914k==0) for(unsigned int j18579k = 0; j18579k < (*j17370k).size(); j18579k++ ) j12706k[j18579k]+=(*j17370k)[j18579k][0]; if(j13914k==1) for(unsigned int j18579k = 0; j18579k < (*j17370k).size(); j18579k++ ) j12706k[j18579k]+=(0.5*pow((*j17370k)[j18579k][0], 2.0))+(-0.5*pow((*j17370k)[j18579k][1], 1.0)); if(j13914k==2) for(unsigned int j18579k = 0; j18579k < (*j17370k).size(); j18579k++ ) j12706k[j18579k]+=(0.1666667*pow((*j17370k)[j18579k][0], 3.0))+(-0.5*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][1], 1.0))+(0.3333333*pow((*j17370k)[j18579k][2], 1.0)); if(j13914k==3) for(unsigned int j18579k = 0; j18579k < (*j17370k).size(); j18579k++ ) j12706k[j18579k]+=(0.04166667*pow((*j17370k)[j18579k][0], 4.0))+(-0.25*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][1], 1.0))+(0.125*pow((*j17370k)[j18579k][1], 2.0))+(0.3333333*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][2], 1.0))+(-0.25*pow((*j17370k)[j18579k][3], 1.0)); if(j13914k==4) for(unsigned int j18579k = 0; j18579k < (*j17370k).size(); j18579k++ ) j12706k[j18579k]+=(0.008333333*pow((*j17370k)[j18579k][0], 5.0))+(-0.08333333*pow((*j17370k)[j18579k][0], 3.0)*pow((*j17370k)[j18579k][1], 1.0))+(0.125*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][1], 2.0))+(0.1666667*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][2], 1.0))+(-0.1666667*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][2], 1.0))+(-0.25*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][3], 1.0))+(0.2*pow((*j17370k)[j18579k][4], 1.0)); if(j13914k==5) for(unsigned int j18579k = 0; j18579k < (*j17370k).size(); j18579k++ ) j12706k[j18579k]+=(0.001388889*pow((*j17370k)[j18579k][0], 6.0))+(-0.02083333*pow((*j17370k)[j18579k][0], 4.0)*pow((*j17370k)[j18579k][1], 1.0))+(0.0625*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][1], 2.0))+(-0.02083333*pow((*j17370k)[j18579k][1], 3.0))+(0.05555556*pow((*j17370k)[j18579k][0], 3.0)*pow((*j17370k)[j18579k][2], 1.0))+(-0.1666667*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][2], 1.0))+(0.05555556*pow((*j17370k)[j18579k][2], 2.0))+(-0.125*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][3], 1.0))+(0.125*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][3], 1.0))+(0.2*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][4], 1.0))+(-0.1666667*pow((*j17370k)[j18579k][5], 1.0)); if(j13914k==6) for(unsigned int j18579k = 0; j18579k < (*j17370k).size(); j18579k++ ) j12706k[j18579k]+=(0.0001984127*pow((*j17370k)[j18579k][0], 7.0))+(-0.004166667*pow((*j17370k)[j18579k][0], 5.0)*pow((*j17370k)[j18579k][1], 1.0))+(0.02083333*pow((*j17370k)[j18579k][0], 3.0)*pow((*j17370k)[j18579k][1], 2.0))+(-0.02083333*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][1], 3.0))+(0.01388889*pow((*j17370k)[j18579k][0], 4.0)*pow((*j17370k)[j18579k][2], 1.0))+(-0.08333333*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][2], 1.0))+(0.04166667*pow((*j17370k)[j18579k][1], 2.0)*pow((*j17370k)[j18579k][2], 1.0))+(0.05555556*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][2], 2.0))+(-0.04166667*pow((*j17370k)[j18579k][0], 3.0)*pow((*j17370k)[j18579k][3], 1.0))+(0.125*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][3], 1.0))+(-0.08333333*pow((*j17370k)[j18579k][2], 1.0)*pow((*j17370k)[j18579k][3], 1.0))+(0.1*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][4], 1.0))+(-0.1*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][4], 1.0))+(-0.1666667*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][5], 1.0))+(0.1428571*pow((*j17370k)[j18579k][6], 1.0)); if(j13914k==7) for(unsigned int j18579k = 0; j18579k < (*j17370k).size(); j18579k++ ) j12706k[j18579k]+=(2.480159e-05*pow((*j17370k)[j18579k][0], 8.0))+(-0.0006944444*pow((*j17370k)[j18579k][0], 6.0)*pow((*j17370k)[j18579k][1], 1.0))+(0.005208333*pow((*j17370k)[j18579k][0], 4.0)*pow((*j17370k)[j18579k][1], 2.0))+(-0.01041667*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][1], 3.0))+(0.002604167*pow((*j17370k)[j18579k][1], 4.0))+(0.002777778*pow((*j17370k)[j18579k][0], 5.0)*pow((*j17370k)[j18579k][2], 1.0))+(-0.02777778*pow((*j17370k)[j18579k][0], 3.0)*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][2], 1.0))+(0.04166667*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][1], 2.0)*pow((*j17370k)[j18579k][2], 1.0))+(0.02777778*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][2], 2.0))+(-0.02777778*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][2], 2.0))+(-0.01041667*pow((*j17370k)[j18579k][0], 4.0)*pow((*j17370k)[j18579k][3], 1.0))+(0.0625*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][3], 1.0))+(-0.03125*pow((*j17370k)[j18579k][1], 2.0)*pow((*j17370k)[j18579k][3], 1.0))+(-0.08333333*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][2], 1.0)*pow((*j17370k)[j18579k][3], 1.0))+(0.03125*pow((*j17370k)[j18579k][3], 2.0))+(0.03333333*pow((*j17370k)[j18579k][0], 3.0)*pow((*j17370k)[j18579k][4], 1.0))+(-0.1*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][4], 1.0))+(0.06666667*pow((*j17370k)[j18579k][2], 1.0)*pow((*j17370k)[j18579k][4], 1.0))+(-0.08333333*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][5], 1.0))+(0.08333333*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][5], 1.0))+(0.1428571*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][6], 1.0))+(-0.125*pow((*j17370k)[j18579k][7], 1.0)); if(j13914k==8) for(unsigned int j18579k = 0; j18579k < (*j17370k).size(); j18579k++ ) j12706k[j18579k]+=(2.755732e-06*pow((*j17370k)[j18579k][0], 9.0))+(-9.920635e-05*pow((*j17370k)[j18579k][0], 7.0)*pow((*j17370k)[j18579k][1], 1.0))+(0.001041667*pow((*j17370k)[j18579k][0], 5.0)*pow((*j17370k)[j18579k][1], 2.0))+(-0.003472222*pow((*j17370k)[j18579k][0], 3.0)*pow((*j17370k)[j18579k][1], 3.0))+(0.002604167*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][1], 4.0))+(0.000462963*pow((*j17370k)[j18579k][0], 6.0)*pow((*j17370k)[j18579k][2], 1.0))+(-0.006944444*pow((*j17370k)[j18579k][0], 4.0)*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][2], 1.0))+(0.02083333*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][1], 2.0)*pow((*j17370k)[j18579k][2], 1.0))+(-0.006944444*pow((*j17370k)[j18579k][1], 3.0)*pow((*j17370k)[j18579k][2], 1.0))+(0.009259259*pow((*j17370k)[j18579k][0], 3.0)*pow((*j17370k)[j18579k][2], 2.0))+(-0.02777778*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][2], 2.0))+(0.00617284*pow((*j17370k)[j18579k][2], 3.0))+(-0.002083333*pow((*j17370k)[j18579k][0], 5.0)*pow((*j17370k)[j18579k][3], 1.0))+(0.02083333*pow((*j17370k)[j18579k][0], 3.0)*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][3], 1.0))+(-0.03125*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][1], 2.0)*pow((*j17370k)[j18579k][3], 1.0))+(-0.04166667*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][2], 1.0)*pow((*j17370k)[j18579k][3], 1.0))+(0.04166667*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][2], 1.0)*pow((*j17370k)[j18579k][3], 1.0))+(0.03125*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][3], 2.0))+(0.008333333*pow((*j17370k)[j18579k][0], 4.0)*pow((*j17370k)[j18579k][4], 1.0))+(-0.05*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][4], 1.0))+(0.025*pow((*j17370k)[j18579k][1], 2.0)*pow((*j17370k)[j18579k][4], 1.0))+(0.06666667*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][2], 1.0)*pow((*j17370k)[j18579k][4], 1.0))+(-0.05*pow((*j17370k)[j18579k][3], 1.0)*pow((*j17370k)[j18579k][4], 1.0))+(-0.02777778*pow((*j17370k)[j18579k][0], 3.0)*pow((*j17370k)[j18579k][5], 1.0))+(0.08333333*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][5], 1.0))+(-0.05555556*pow((*j17370k)[j18579k][2], 1.0)*pow((*j17370k)[j18579k][5], 1.0))+(0.07142857*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][6], 1.0))+(-0.07142857*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][6], 1.0))+(-0.125*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][7], 1.0))+(0.1111111*pow((*j17370k)[j18579k][8], 1.0)); if(j13914k==9) for(unsigned int j18579k = 0; j18579k < (*j17370k).size(); j18579k++ ) j12706k[j18579k]+=(2.755732e-07*pow((*j17370k)[j18579k][0], 10.0))+(-1.240079e-05*pow((*j17370k)[j18579k][0], 8.0)*pow((*j17370k)[j18579k][1], 1.0))+(0.0001736111*pow((*j17370k)[j18579k][0], 6.0)*pow((*j17370k)[j18579k][1], 2.0))+(-0.0008680556*pow((*j17370k)[j18579k][0], 4.0)*pow((*j17370k)[j18579k][1], 3.0))+(0.001302083*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][1], 4.0))+(-0.0002604167*pow((*j17370k)[j18579k][1], 5.0))+(6.613757e-05*pow((*j17370k)[j18579k][0], 7.0)*pow((*j17370k)[j18579k][2], 1.0))+(-0.001388889*pow((*j17370k)[j18579k][0], 5.0)*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][2], 1.0))+(0.006944444*pow((*j17370k)[j18579k][0], 3.0)*pow((*j17370k)[j18579k][1], 2.0)*pow((*j17370k)[j18579k][2], 1.0))+(-0.006944444*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][1], 3.0)*pow((*j17370k)[j18579k][2], 1.0))+(0.002314815*pow((*j17370k)[j18579k][0], 4.0)*pow((*j17370k)[j18579k][2], 2.0))+(-0.01388889*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][2], 2.0))+(0.006944444*pow((*j17370k)[j18579k][1], 2.0)*pow((*j17370k)[j18579k][2], 2.0))+(0.00617284*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][2], 3.0))+(-0.0003472222*pow((*j17370k)[j18579k][0], 6.0)*pow((*j17370k)[j18579k][3], 1.0))+(0.005208333*pow((*j17370k)[j18579k][0], 4.0)*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][3], 1.0))+(-0.015625*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][1], 2.0)*pow((*j17370k)[j18579k][3], 1.0))+(0.005208333*pow((*j17370k)[j18579k][1], 3.0)*pow((*j17370k)[j18579k][3], 1.0))+(-0.01388889*pow((*j17370k)[j18579k][0], 3.0)*pow((*j17370k)[j18579k][2], 1.0)*pow((*j17370k)[j18579k][3], 1.0))+(0.04166667*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][2], 1.0)*pow((*j17370k)[j18579k][3], 1.0))+(-0.01388889*pow((*j17370k)[j18579k][2], 2.0)*pow((*j17370k)[j18579k][3], 1.0))+(0.015625*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][3], 2.0))+(-0.015625*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][3], 2.0))+(0.001666667*pow((*j17370k)[j18579k][0], 5.0)*pow((*j17370k)[j18579k][4], 1.0))+(-0.01666667*pow((*j17370k)[j18579k][0], 3.0)*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][4], 1.0))+(0.025*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][1], 2.0)*pow((*j17370k)[j18579k][4], 1.0))+(0.03333333*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][2], 1.0)*pow((*j17370k)[j18579k][4], 1.0))+(-0.03333333*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][2], 1.0)*pow((*j17370k)[j18579k][4], 1.0))+(-0.05*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][3], 1.0)*pow((*j17370k)[j18579k][4], 1.0))+(0.02*pow((*j17370k)[j18579k][4], 2.0))+(-0.006944444*pow((*j17370k)[j18579k][0], 4.0)*pow((*j17370k)[j18579k][5], 1.0))+(0.04166667*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][5], 1.0))+(-0.02083333*pow((*j17370k)[j18579k][1], 2.0)*pow((*j17370k)[j18579k][5], 1.0))+(-0.05555556*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][2], 1.0)*pow((*j17370k)[j18579k][5], 1.0))+(0.04166667*pow((*j17370k)[j18579k][3], 1.0)*pow((*j17370k)[j18579k][5], 1.0))+(0.02380952*pow((*j17370k)[j18579k][0], 3.0)*pow((*j17370k)[j18579k][6], 1.0))+(-0.07142857*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][6], 1.0))+(0.04761905*pow((*j17370k)[j18579k][2], 1.0)*pow((*j17370k)[j18579k][6], 1.0))+(-0.0625*pow((*j17370k)[j18579k][0], 2.0)*pow((*j17370k)[j18579k][7], 1.0))+(0.0625*pow((*j17370k)[j18579k][1], 1.0)*pow((*j17370k)[j18579k][7], 1.0))+(0.1111111*pow((*j17370k)[j18579k][0], 1.0)*pow((*j17370k)[j18579k][8], 1.0))+(-0.1*pow((*j17370k)[j18579k][9], 1.0)); } } if(j19745k){ for(int j18579k=0;j18579k<j19276k;j18579k++) { if(j12706k[j18579k]>j15726k) j12706k[j18579k]=j15726k; if(j12706k[j18579k]<j17261k) j12706k[j18579k]=j17261k; } } return (j12706k); }
