#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export]]
List trainFM(List j14686k) { int j10782k=(j14686k["iIter"]); int j15574k=(j14686k["variables"]); int j16917k=(j14686k["traincases"]); double j13838k=(j14686k["dStdev"]); std::vector<int> j11689k = as< std::vector<int> >(j14686k["vK"]); bool j19428k=(j14686k["bIntercept"]); std::vector<double> j11020k = as< std::vector<double> >(j14686k["vLambda"]); std::vector<double> j16520k = as< std::vector<double> >(j14686k["lV3"]); NumericMatrix j15485k = as< NumericMatrix >(j14686k["mX"]); std::vector<double> j13508k = as< std::vector<double> >(j14686k["vY"]); if(j11689k.size()!=10) j11689k.resize(10,0); int *j18141k; double* j16174k; double* j12370k; double* j15582k; double* j17089k; std::vector<double>* j11530k; double j19837k, j16766k, j12183k; int j13754k; int j11593k=j11689k.size(); std::vector<double> j12629k(j15485k.nrow()); std::vector< std::vector<double> > j11234k(j11593k); std::vector< std::vector<double> > j11192k(j11593k); for(int j12801k=0;j12801k<j11593k;j12801k++){ j11234k[j12801k].resize(j11689k[j12801k]); j11192k[j12801k].resize(j11689k[j12801k]); } for(unsigned int j12801k=0;j12801k<j11234k.size();j12801k++){ for(unsigned int j16072k=0;j16072k<j11234k[j12801k].size();j16072k++){ j11234k[j12801k][j16072k]=0.0; j11192k[j12801k][j16072k]=0.0; } } double j19059k, j12370k2, j16174k2, j12500k, j12873k, j11422k, j14335k; std::vector< std::vector<int> >j16229k(j15574k); std::vector< std::vector<double> >j15512k(j15574k); for(int j15397k = 0; j15397k < j15485k.nrow(); j15397k++ ){ j16229k[j15485k(j15397k,1)].push_back(j15485k(j15397k,0)); j15512k[j15485k(j15397k,1)].push_back(j15485k(j15397k,2)); } double j17945k=*(std::min_element(j13508k.begin(),j13508k.end())); double j13741k=*(std::max_element(j13508k.begin(),j13508k.end())); j19837k=0; for(int j11206k=0;j11206k<j11593k;j11206k++) j19837k+=j11689k[j11206k]; if(j16520k.size()!=j19837k*j15574k+1){ j16520k.resize(j19837k*j15574k+1,0); for(unsigned int j12801k=0;j12801k<j16520k.size();j12801k++){ j11422k=0; j14335k=j13838k; do { do { j19059k = R::runif(0,1); } while (j19059k == 0.0); j12370k2 = 1.7156 * (R::runif(0,1) - 0.5); j16174k2 = j19059k - 0.449871; j12500k = std::abs(j12370k2) + 0.386595; j12873k = j16174k2*j16174k2 + j12500k*(0.19600*j12500k-0.25472*j16174k2); if (j12873k < 0.27597) { break; } } while ((j12873k > 0.27846) || ((j12370k2*j12370k2) > (-4.0*j19059k*j19059k*std::log(j19059k)))); j16520k[j12801k]=j11422k+(j14335k*(j12370k2/j19059k)); } } std::vector<double> j12536k(j16520k.size(),0); std::vector< std::vector< std::vector< std::vector<double> > > > j17260k; j17260k.resize(j11593k); for(int j12801k = 0; j12801k < j11593k; j12801k++ ) { j17260k[j12801k].resize(j11689k[j12801k]); for(int j16072k = 0; j16072k < j11689k[j12801k]; j16072k++ ) { j17260k[j12801k][j16072k].resize(j16917k); for(int j15925k = 0; j15925k < j16917k; j15925k++ ){ j17260k[j12801k][j16072k][j15925k].resize(j12801k+1); for(int j18694k = 0; j18694k < j12801k+1; j18694k++ ) j17260k[j12801k][j16072k][j15925k][j18694k]=0; } } } for(unsigned int j12801k = 0; j12801k < j17260k.size(); j12801k++ ) { for(unsigned int j16072k = 0; j16072k < j17260k[j12801k].size(); j16072k++ ) { for(unsigned int j15925k = 0; j15925k < j17260k[j12801k][j16072k].size(); j15925k++ ){ for(unsigned int j18694k = 0; j18694k < j17260k[j12801k][j16072k][j15925k].size(); j18694k++ ) j17260k[j12801k][j16072k][j15925k][j18694k]=0; } } } j13754k=0; for(int j11206k = 0; j11206k < j11593k; j11206k++ ) { for( int j16731k = 0; j16731k < j11689k[j11206k]; j16731k++ ) { for( int j12143k = 0; j12143k < j15574k; j12143k++ ) { j13754k++; j12370k=&j16520k[j13754k]; for( unsigned int j15397k = 0; j15397k < j16229k[j12143k].size(); j15397k++ ) { j18141k=&j16229k[j12143k][j15397k]; j16174k=&j15512k[j12143k][j15397k]; j11530k=&j17260k[j11206k][j16731k][*j18141k]; for( unsigned int j19963k = 1; j19963k <= (*j11530k).size(); j19963k++ ) { (*j11530k)[j19963k-1]+=pow(*j16174k,(double) j19963k)*pow(*j12370k,(double) j19963k); } } } } } std::vector< std::vector<double> >* j11336k; std::vector<double> j16956k(j16917k,j16520k[0]); for(int j11206k = 0; j11206k < j11593k; j11206k++ ) { for( int j16731k = 0; j16731k < j11689k[j11206k]; j16731k++ ) { j11336k=&j17260k[j11206k][j16731k]; if(j11206k==0) for(unsigned int j15397k = 0; j15397k < (*j11336k).size(); j15397k++ ) j16956k[j15397k]+=(*j11336k)[j15397k][0]; if(j11206k==1) for(unsigned int j15397k = 0; j15397k < (*j11336k).size(); j15397k++ ) j16956k[j15397k]+=(0.5*pow((*j11336k)[j15397k][0], 2.0))+(-0.5*pow((*j11336k)[j15397k][1], 1.0)); if(j11206k==2) for(unsigned int j15397k = 0; j15397k < (*j11336k).size(); j15397k++ ) j16956k[j15397k]+=(0.1666667*pow((*j11336k)[j15397k][0], 3.0))+(-0.5*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][1], 1.0))+(0.3333333*pow((*j11336k)[j15397k][2], 1.0)); if(j11206k==3) for(unsigned int j15397k = 0; j15397k < (*j11336k).size(); j15397k++ ) j16956k[j15397k]+=(0.04166667*pow((*j11336k)[j15397k][0], 4.0))+(-0.25*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][1], 1.0))+(0.125*pow((*j11336k)[j15397k][1], 2.0))+(0.3333333*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][2], 1.0))+(-0.25*pow((*j11336k)[j15397k][3], 1.0)); if(j11206k==4) for(unsigned int j15397k = 0; j15397k < (*j11336k).size(); j15397k++ ) j16956k[j15397k]+=(0.008333333*pow((*j11336k)[j15397k][0], 5.0))+(-0.08333333*pow((*j11336k)[j15397k][0], 3.0)*pow((*j11336k)[j15397k][1], 1.0))+(0.125*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][1], 2.0))+(0.1666667*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][2], 1.0))+(-0.1666667*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][2], 1.0))+(-0.25*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][3], 1.0))+(0.2*pow((*j11336k)[j15397k][4], 1.0)); if(j11206k==5) for(unsigned int j15397k = 0; j15397k < (*j11336k).size(); j15397k++ ) j16956k[j15397k]+=(0.001388889*pow((*j11336k)[j15397k][0], 6.0))+(-0.02083333*pow((*j11336k)[j15397k][0], 4.0)*pow((*j11336k)[j15397k][1], 1.0))+(0.0625*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][1], 2.0))+(-0.02083333*pow((*j11336k)[j15397k][1], 3.0))+(0.05555556*pow((*j11336k)[j15397k][0], 3.0)*pow((*j11336k)[j15397k][2], 1.0))+(-0.1666667*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][2], 1.0))+(0.05555556*pow((*j11336k)[j15397k][2], 2.0))+(-0.125*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][3], 1.0))+(0.125*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][3], 1.0))+(0.2*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][4], 1.0))+(-0.1666667*pow((*j11336k)[j15397k][5], 1.0)); if(j11206k==6) for(unsigned int j15397k = 0; j15397k < (*j11336k).size(); j15397k++ ) j16956k[j15397k]+=(0.0001984127*pow((*j11336k)[j15397k][0], 7.0))+(-0.004166667*pow((*j11336k)[j15397k][0], 5.0)*pow((*j11336k)[j15397k][1], 1.0))+(0.02083333*pow((*j11336k)[j15397k][0], 3.0)*pow((*j11336k)[j15397k][1], 2.0))+(-0.02083333*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][1], 3.0))+(0.01388889*pow((*j11336k)[j15397k][0], 4.0)*pow((*j11336k)[j15397k][2], 1.0))+(-0.08333333*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][2], 1.0))+(0.04166667*pow((*j11336k)[j15397k][1], 2.0)*pow((*j11336k)[j15397k][2], 1.0))+(0.05555556*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][2], 2.0))+(-0.04166667*pow((*j11336k)[j15397k][0], 3.0)*pow((*j11336k)[j15397k][3], 1.0))+(0.125*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][3], 1.0))+(-0.08333333*pow((*j11336k)[j15397k][2], 1.0)*pow((*j11336k)[j15397k][3], 1.0))+(0.1*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][4], 1.0))+(-0.1*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][4], 1.0))+(-0.1666667*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][5], 1.0))+(0.1428571*pow((*j11336k)[j15397k][6], 1.0)); if(j11206k==7) for(unsigned int j15397k = 0; j15397k < (*j11336k).size(); j15397k++ ) j16956k[j15397k]+=(2.480159e-05*pow((*j11336k)[j15397k][0], 8.0))+(-0.0006944444*pow((*j11336k)[j15397k][0], 6.0)*pow((*j11336k)[j15397k][1], 1.0))+(0.005208333*pow((*j11336k)[j15397k][0], 4.0)*pow((*j11336k)[j15397k][1], 2.0))+(-0.01041667*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][1], 3.0))+(0.002604167*pow((*j11336k)[j15397k][1], 4.0))+(0.002777778*pow((*j11336k)[j15397k][0], 5.0)*pow((*j11336k)[j15397k][2], 1.0))+(-0.02777778*pow((*j11336k)[j15397k][0], 3.0)*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][2], 1.0))+(0.04166667*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][1], 2.0)*pow((*j11336k)[j15397k][2], 1.0))+(0.02777778*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][2], 2.0))+(-0.02777778*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][2], 2.0))+(-0.01041667*pow((*j11336k)[j15397k][0], 4.0)*pow((*j11336k)[j15397k][3], 1.0))+(0.0625*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][3], 1.0))+(-0.03125*pow((*j11336k)[j15397k][1], 2.0)*pow((*j11336k)[j15397k][3], 1.0))+(-0.08333333*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][2], 1.0)*pow((*j11336k)[j15397k][3], 1.0))+(0.03125*pow((*j11336k)[j15397k][3], 2.0))+(0.03333333*pow((*j11336k)[j15397k][0], 3.0)*pow((*j11336k)[j15397k][4], 1.0))+(-0.1*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][4], 1.0))+(0.06666667*pow((*j11336k)[j15397k][2], 1.0)*pow((*j11336k)[j15397k][4], 1.0))+(-0.08333333*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][5], 1.0))+(0.08333333*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][5], 1.0))+(0.1428571*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][6], 1.0))+(-0.125*pow((*j11336k)[j15397k][7], 1.0)); if(j11206k==8) for(unsigned int j15397k = 0; j15397k < (*j11336k).size(); j15397k++ ) j16956k[j15397k]+=(2.755732e-06*pow((*j11336k)[j15397k][0], 9.0))+(-9.920635e-05*pow((*j11336k)[j15397k][0], 7.0)*pow((*j11336k)[j15397k][1], 1.0))+(0.001041667*pow((*j11336k)[j15397k][0], 5.0)*pow((*j11336k)[j15397k][1], 2.0))+(-0.003472222*pow((*j11336k)[j15397k][0], 3.0)*pow((*j11336k)[j15397k][1], 3.0))+(0.002604167*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][1], 4.0))+(0.000462963*pow((*j11336k)[j15397k][0], 6.0)*pow((*j11336k)[j15397k][2], 1.0))+(-0.006944444*pow((*j11336k)[j15397k][0], 4.0)*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][2], 1.0))+(0.02083333*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][1], 2.0)*pow((*j11336k)[j15397k][2], 1.0))+(-0.006944444*pow((*j11336k)[j15397k][1], 3.0)*pow((*j11336k)[j15397k][2], 1.0))+(0.009259259*pow((*j11336k)[j15397k][0], 3.0)*pow((*j11336k)[j15397k][2], 2.0))+(-0.02777778*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][2], 2.0))+(0.00617284*pow((*j11336k)[j15397k][2], 3.0))+(-0.002083333*pow((*j11336k)[j15397k][0], 5.0)*pow((*j11336k)[j15397k][3], 1.0))+(0.02083333*pow((*j11336k)[j15397k][0], 3.0)*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][3], 1.0))+(-0.03125*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][1], 2.0)*pow((*j11336k)[j15397k][3], 1.0))+(-0.04166667*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][2], 1.0)*pow((*j11336k)[j15397k][3], 1.0))+(0.04166667*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][2], 1.0)*pow((*j11336k)[j15397k][3], 1.0))+(0.03125*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][3], 2.0))+(0.008333333*pow((*j11336k)[j15397k][0], 4.0)*pow((*j11336k)[j15397k][4], 1.0))+(-0.05*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][4], 1.0))+(0.025*pow((*j11336k)[j15397k][1], 2.0)*pow((*j11336k)[j15397k][4], 1.0))+(0.06666667*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][2], 1.0)*pow((*j11336k)[j15397k][4], 1.0))+(-0.05*pow((*j11336k)[j15397k][3], 1.0)*pow((*j11336k)[j15397k][4], 1.0))+(-0.02777778*pow((*j11336k)[j15397k][0], 3.0)*pow((*j11336k)[j15397k][5], 1.0))+(0.08333333*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][5], 1.0))+(-0.05555556*pow((*j11336k)[j15397k][2], 1.0)*pow((*j11336k)[j15397k][5], 1.0))+(0.07142857*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][6], 1.0))+(-0.07142857*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][6], 1.0))+(-0.125*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][7], 1.0))+(0.1111111*pow((*j11336k)[j15397k][8], 1.0)); if(j11206k==9) for(unsigned int j15397k = 0; j15397k < (*j11336k).size(); j15397k++ ) j16956k[j15397k]+=(2.755732e-07*pow((*j11336k)[j15397k][0], 10.0))+(-1.240079e-05*pow((*j11336k)[j15397k][0], 8.0)*pow((*j11336k)[j15397k][1], 1.0))+(0.0001736111*pow((*j11336k)[j15397k][0], 6.0)*pow((*j11336k)[j15397k][1], 2.0))+(-0.0008680556*pow((*j11336k)[j15397k][0], 4.0)*pow((*j11336k)[j15397k][1], 3.0))+(0.001302083*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][1], 4.0))+(-0.0002604167*pow((*j11336k)[j15397k][1], 5.0))+(6.613757e-05*pow((*j11336k)[j15397k][0], 7.0)*pow((*j11336k)[j15397k][2], 1.0))+(-0.001388889*pow((*j11336k)[j15397k][0], 5.0)*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][2], 1.0))+(0.006944444*pow((*j11336k)[j15397k][0], 3.0)*pow((*j11336k)[j15397k][1], 2.0)*pow((*j11336k)[j15397k][2], 1.0))+(-0.006944444*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][1], 3.0)*pow((*j11336k)[j15397k][2], 1.0))+(0.002314815*pow((*j11336k)[j15397k][0], 4.0)*pow((*j11336k)[j15397k][2], 2.0))+(-0.01388889*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][2], 2.0))+(0.006944444*pow((*j11336k)[j15397k][1], 2.0)*pow((*j11336k)[j15397k][2], 2.0))+(0.00617284*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][2], 3.0))+(-0.0003472222*pow((*j11336k)[j15397k][0], 6.0)*pow((*j11336k)[j15397k][3], 1.0))+(0.005208333*pow((*j11336k)[j15397k][0], 4.0)*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][3], 1.0))+(-0.015625*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][1], 2.0)*pow((*j11336k)[j15397k][3], 1.0))+(0.005208333*pow((*j11336k)[j15397k][1], 3.0)*pow((*j11336k)[j15397k][3], 1.0))+(-0.01388889*pow((*j11336k)[j15397k][0], 3.0)*pow((*j11336k)[j15397k][2], 1.0)*pow((*j11336k)[j15397k][3], 1.0))+(0.04166667*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][2], 1.0)*pow((*j11336k)[j15397k][3], 1.0))+(-0.01388889*pow((*j11336k)[j15397k][2], 2.0)*pow((*j11336k)[j15397k][3], 1.0))+(0.015625*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][3], 2.0))+(-0.015625*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][3], 2.0))+(0.001666667*pow((*j11336k)[j15397k][0], 5.0)*pow((*j11336k)[j15397k][4], 1.0))+(-0.01666667*pow((*j11336k)[j15397k][0], 3.0)*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][4], 1.0))+(0.025*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][1], 2.0)*pow((*j11336k)[j15397k][4], 1.0))+(0.03333333*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][2], 1.0)*pow((*j11336k)[j15397k][4], 1.0))+(-0.03333333*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][2], 1.0)*pow((*j11336k)[j15397k][4], 1.0))+(-0.05*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][3], 1.0)*pow((*j11336k)[j15397k][4], 1.0))+(0.02*pow((*j11336k)[j15397k][4], 2.0))+(-0.006944444*pow((*j11336k)[j15397k][0], 4.0)*pow((*j11336k)[j15397k][5], 1.0))+(0.04166667*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][5], 1.0))+(-0.02083333*pow((*j11336k)[j15397k][1], 2.0)*pow((*j11336k)[j15397k][5], 1.0))+(-0.05555556*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][2], 1.0)*pow((*j11336k)[j15397k][5], 1.0))+(0.04166667*pow((*j11336k)[j15397k][3], 1.0)*pow((*j11336k)[j15397k][5], 1.0))+(0.02380952*pow((*j11336k)[j15397k][0], 3.0)*pow((*j11336k)[j15397k][6], 1.0))+(-0.07142857*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][6], 1.0))+(0.04761905*pow((*j11336k)[j15397k][2], 1.0)*pow((*j11336k)[j15397k][6], 1.0))+(-0.0625*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][7], 1.0))+(0.0625*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][7], 1.0))+(0.1111111*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][8], 1.0))+(-0.1*pow((*j11336k)[j15397k][9], 1.0)); } } std::vector<double> j16852k(j16917k,0); for(int j15397k=0;j15397k<j16917k;j15397k++) j16852k[j15397k]=j16956k[j15397k]-j13508k[j15397k]; for(int j11377k=0; j11377k<j10782k; j11377k++){ if(j19428k){ j12183k=0.0; for( unsigned int j15397k=0; j15397k<j16852k.size(); j15397k++ ) j12183k+=(j16852k[j15397k]-j16520k[0]); j12183k/=(-double(j16852k.size())); if(j12183k!=j12183k) j12183k=0; for( unsigned int j15397k=0; j15397k<j16852k.size(); j15397k++ ) j16852k[j15397k]+=(j12183k-j16520k[0]); j16520k[0]=j12183k; } j13754k=0; j17089k=&j11020k[0]; for( int j16731k = 0; j16731k < j11689k[0]; j16731k++ ) { for( int j12143k = 0; j12143k < j15574k; j12143k++ ) { j13754k++; j12370k=&j16520k[j13754k]; j19837k=0; j16766k=0; for( unsigned int j15397k = 0; j15397k < j16229k[j12143k].size(); j15397k++ ) { j18141k=&j16229k[j12143k][j15397k]; j16174k=&j15512k[j12143k][j15397k]; j11530k=&j17260k[0][j16731k][*j18141k]; j15582k=&j16852k[*j18141k]; j12629k[j15397k]=(*j16174k); j19837k+=(((*j15582k)-((*j12370k)*j12629k[j15397k]))*j12629k[j15397k]); j16766k+=pow(j12629k[j15397k],2.0)+(*j17089k); } j12183k=(-j19837k/j16766k); if(std::isinf(j12183k) || std::isnan(j12183k)) j12183k=0; for( unsigned int j15397k = 0; j15397k < j16229k[j12143k].size(); j15397k++ ) { j18141k=&j16229k[j12143k][j15397k]; j16174k=&j15512k[j12143k][j15397k]; j11530k=&j17260k[0][j16731k][*j18141k]; j15582k=&j16852k[*j18141k]; (*j15582k)+=(j12183k-(*j12370k))*j12629k[j15397k]; (*j11530k)[0]+=(pow(j12183k,1.0)-pow(*j12370k,1.0))*pow(*j16174k,1.0); (*j11530k)[-1]+=(pow(j12183k,0.0)-pow(*j12370k,0.0))*pow(*j16174k,0.0); } (*j12370k)=j12183k; } } j17089k=&j11020k[1]; for( int j16731k = 0; j16731k < j11689k[1]; j16731k++ ) { for( int j12143k = 0; j12143k < j15574k; j12143k++ ) { j13754k++; j12370k=&j16520k[j13754k]; j19837k=0; j16766k=0; for( unsigned int j15397k = 0; j15397k < j16229k[j12143k].size(); j15397k++ ) { j18141k=&j16229k[j12143k][j15397k]; j16174k=&j15512k[j12143k][j15397k]; j11530k=&j17260k[1][j16731k][*j18141k]; j15582k=&j16852k[*j18141k]; j12629k[j15397k]=((1.0)*pow((*j11530k)[0],1.0))+((-1.0)*(*j16174k)*(*j12370k)); j19837k+=(((*j15582k)-((*j12370k)*j12629k[j15397k]))*j12629k[j15397k]); j16766k+=pow(j12629k[j15397k],2.0)+(*j17089k); } j12183k=(-j19837k/j16766k); if(std::isinf(j12183k) || std::isnan(j12183k)) j12183k=0; for( unsigned int j15397k = 0; j15397k < j16229k[j12143k].size(); j15397k++ ) { j18141k=&j16229k[j12143k][j15397k]; j16174k=&j15512k[j12143k][j15397k]; j11530k=&j17260k[1][j16731k][*j18141k]; j15582k=&j16852k[*j18141k]; (*j15582k)+=(j12183k-(*j12370k))*j12629k[j15397k]; (*j11530k)[0]+=(pow(j12183k,1.0)-pow(*j12370k,1.0))*pow(*j16174k,1.0); } (*j12370k)=j12183k; } } j17089k=&j11020k[2]; for( int j16731k = 0; j16731k < j11689k[2]; j16731k++ ) { for( int j12143k = 0; j12143k < j15574k; j12143k++ ) { j13754k++; j12370k=&j16520k[j13754k]; j19837k=0; j16766k=0; for( unsigned int j15397k = 0; j15397k < j16229k[j12143k].size(); j15397k++ ) { j18141k=&j16229k[j12143k][j15397k]; j16174k=&j15512k[j12143k][j15397k]; j11530k=&j17260k[2][j16731k][*j18141k]; j15582k=&j16852k[*j18141k]; j12629k[j15397k]=((0.5)*pow((*j11530k)[0],2.0))+((-0.5)*pow((*j11530k)[1],1.0))+((-1.0)*pow((*j11530k)[0],1.0)*(*j16174k)*(*j12370k))+((1.0)*pow((*j16174k)*(*j12370k),2.0)); j19837k+=(((*j15582k)-((*j12370k)*j12629k[j15397k]))*j12629k[j15397k]); j16766k+=pow(j12629k[j15397k],2.0)+(*j17089k); } j12183k=(-j19837k/j16766k); if(std::isinf(j12183k) || std::isnan(j12183k)) j12183k=0; for( unsigned int j15397k = 0; j15397k < j16229k[j12143k].size(); j15397k++ ) { j18141k=&j16229k[j12143k][j15397k]; j16174k=&j15512k[j12143k][j15397k]; j11530k=&j17260k[2][j16731k][*j18141k]; j15582k=&j16852k[*j18141k]; (*j15582k)+=(j12183k-(*j12370k))*j12629k[j15397k]; (*j11530k)[0]+=(pow(j12183k,1.0)-pow(*j12370k,1.0))*pow(*j16174k,1.0); (*j11530k)[1]+=(pow(j12183k,2.0)-pow(*j12370k,2.0))*pow(*j16174k,2.0); } (*j12370k)=j12183k; } } j17089k=&j11020k[3]; for( int j16731k = 0; j16731k < j11689k[3]; j16731k++ ) { for( int j12143k = 0; j12143k < j15574k; j12143k++ ) { j13754k++; j12370k=&j16520k[j13754k]; j19837k=0; j16766k=0; for( unsigned int j15397k = 0; j15397k < j16229k[j12143k].size(); j15397k++ ) { j18141k=&j16229k[j12143k][j15397k]; j16174k=&j15512k[j12143k][j15397k]; j11530k=&j17260k[3][j16731k][*j18141k]; j15582k=&j16852k[*j18141k]; j12629k[j15397k]=((0.1666667)*pow((*j11530k)[0],3.0))+((-0.5)*pow((*j11530k)[0],1.0)*pow((*j11530k)[1],1.0))+((-0.5)*pow((*j11530k)[0],2.0)*(*j16174k)*(*j12370k))+((0.5)*pow((*j11530k)[1],1.0)*(*j16174k)*(*j12370k))+((0.3333333)*pow((*j11530k)[2],1.0))+((1.0)*pow((*j11530k)[0],1.0)*pow((*j16174k)*(*j12370k),2.0))+((-1.0)*pow((*j16174k)*(*j12370k),3.0)); j19837k+=(((*j15582k)-((*j12370k)*j12629k[j15397k]))*j12629k[j15397k]); j16766k+=pow(j12629k[j15397k],2.0)+(*j17089k); } j12183k=(-j19837k/j16766k); if(std::isinf(j12183k) || std::isnan(j12183k)) j12183k=0; for( unsigned int j15397k = 0; j15397k < j16229k[j12143k].size(); j15397k++ ) { j18141k=&j16229k[j12143k][j15397k]; j16174k=&j15512k[j12143k][j15397k]; j11530k=&j17260k[3][j16731k][*j18141k]; j15582k=&j16852k[*j18141k]; (*j15582k)+=(j12183k-(*j12370k))*j12629k[j15397k]; (*j11530k)[0]+=(pow(j12183k,1.0)-pow(*j12370k,1.0))*pow(*j16174k,1.0); (*j11530k)[1]+=(pow(j12183k,2.0)-pow(*j12370k,2.0))*pow(*j16174k,2.0); (*j11530k)[2]+=(pow(j12183k,3.0)-pow(*j12370k,3.0))*pow(*j16174k,3.0); } (*j12370k)=j12183k; } } j17089k=&j11020k[4]; for( int j16731k = 0; j16731k < j11689k[4]; j16731k++ ) { for( int j12143k = 0; j12143k < j15574k; j12143k++ ) { j13754k++; j12370k=&j16520k[j13754k]; j19837k=0; j16766k=0; for( unsigned int j15397k = 0; j15397k < j16229k[j12143k].size(); j15397k++ ) { j18141k=&j16229k[j12143k][j15397k]; j16174k=&j15512k[j12143k][j15397k]; j11530k=&j17260k[4][j16731k][*j18141k]; j15582k=&j16852k[*j18141k]; j12629k[j15397k]=((0.04166667)*pow((*j11530k)[0],4.0))+((-0.25)*pow((*j11530k)[0],2.0)*pow((*j11530k)[1],1.0))+((-0.1666667)*pow((*j11530k)[0],3.0)*(*j16174k)*(*j12370k))+((0.125)*pow((*j11530k)[1],2.0))+((0.5)*pow((*j11530k)[0],1.0)*pow((*j11530k)[1],1.0)*(*j16174k)*(*j12370k))+((0.3333333)*pow((*j11530k)[0],1.0)*pow((*j11530k)[2],1.0))+((0.5)*pow((*j11530k)[0],2.0)*pow((*j16174k)*(*j12370k),2.0))+((-0.3333333)*(*j16174k)*(*j12370k)*pow((*j11530k)[2],1.0))+((-0.5)*pow((*j11530k)[1],1.0)*pow((*j16174k)*(*j12370k),2.0))+((-0.25)*pow((*j11530k)[3],1.0))+((-1.0)*pow((*j11530k)[0],1.0)*pow((*j16174k)*(*j12370k),3.0))+((1.0)*pow((*j16174k)*(*j12370k),4.0)); j19837k+=(((*j15582k)-((*j12370k)*j12629k[j15397k]))*j12629k[j15397k]); j16766k+=pow(j12629k[j15397k],2.0)+(*j17089k); } j12183k=(-j19837k/j16766k); if(std::isinf(j12183k) || std::isnan(j12183k)) j12183k=0; for( unsigned int j15397k = 0; j15397k < j16229k[j12143k].size(); j15397k++ ) { j18141k=&j16229k[j12143k][j15397k]; j16174k=&j15512k[j12143k][j15397k]; j11530k=&j17260k[4][j16731k][*j18141k]; j15582k=&j16852k[*j18141k]; (*j15582k)+=(j12183k-(*j12370k))*j12629k[j15397k]; (*j11530k)[0]+=(pow(j12183k,1.0)-pow(*j12370k,1.0))*pow(*j16174k,1.0); (*j11530k)[1]+=(pow(j12183k,2.0)-pow(*j12370k,2.0))*pow(*j16174k,2.0); (*j11530k)[2]+=(pow(j12183k,3.0)-pow(*j12370k,3.0))*pow(*j16174k,3.0); (*j11530k)[3]+=(pow(j12183k,4.0)-pow(*j12370k,4.0))*pow(*j16174k,4.0); } (*j12370k)=j12183k; } } j17089k=&j11020k[5]; for( int j16731k = 0; j16731k < j11689k[5]; j16731k++ ) { for( int j12143k = 0; j12143k < j15574k; j12143k++ ) { j13754k++; j12370k=&j16520k[j13754k]; j19837k=0; j16766k=0; for( unsigned int j15397k = 0; j15397k < j16229k[j12143k].size(); j15397k++ ) { j18141k=&j16229k[j12143k][j15397k]; j16174k=&j15512k[j12143k][j15397k]; j11530k=&j17260k[5][j16731k][*j18141k]; j15582k=&j16852k[*j18141k]; j12629k[j15397k]=((0.008333333)*pow((*j11530k)[0],5.0))+((-0.08333333)*pow((*j11530k)[0],3.0)*pow((*j11530k)[1],1.0))+((-0.04166667)*pow((*j11530k)[0],4.0)*(*j16174k)*(*j12370k))+((0.125)*pow((*j11530k)[0],1.0)*pow((*j11530k)[1],2.0))+((0.25)*pow((*j11530k)[0],2.0)*pow((*j11530k)[1],1.0)*(*j16174k)*(*j12370k))+((-0.125)*pow((*j11530k)[1],2.0)*(*j16174k)*(*j12370k))+((0.1666667)*pow((*j11530k)[0],2.0)*pow((*j11530k)[2],1.0))+((0.1666667)*pow((*j11530k)[0],3.0)*pow((*j16174k)*(*j12370k),2.0))+((-0.1666667)*pow((*j11530k)[1],1.0)*pow((*j11530k)[2],1.0))+((-0.3333333)*pow((*j11530k)[0],1.0)*(*j16174k)*(*j12370k)*pow((*j11530k)[2],1.0))+((-0.5)*pow((*j11530k)[0],1.0)*pow((*j11530k)[1],1.0)*pow((*j16174k)*(*j12370k),2.0))+((0.3333333)*pow((*j11530k)[2],1.0)*pow((*j16174k)*(*j12370k),2.0))+((-0.25)*pow((*j11530k)[0],1.0)*pow((*j11530k)[3],1.0))+((-0.5)*pow((*j11530k)[0],2.0)*pow((*j16174k)*(*j12370k),3.0))+((0.25)*(*j16174k)*(*j12370k)*pow((*j11530k)[3],1.0))+((0.5)*pow((*j11530k)[1],1.0)*pow((*j16174k)*(*j12370k),3.0))+((0.2)*pow((*j11530k)[4],1.0))+((1.0)*pow((*j11530k)[0],1.0)*pow((*j16174k)*(*j12370k),4.0))+((-1.0)*pow((*j16174k)*(*j12370k),5.0)); j19837k+=(((*j15582k)-((*j12370k)*j12629k[j15397k]))*j12629k[j15397k]); j16766k+=pow(j12629k[j15397k],2.0)+(*j17089k); } j12183k=(-j19837k/j16766k); if(std::isinf(j12183k) || std::isnan(j12183k)) j12183k=0; for( unsigned int j15397k = 0; j15397k < j16229k[j12143k].size(); j15397k++ ) { j18141k=&j16229k[j12143k][j15397k]; j16174k=&j15512k[j12143k][j15397k]; j11530k=&j17260k[5][j16731k][*j18141k]; j15582k=&j16852k[*j18141k]; (*j15582k)+=(j12183k-(*j12370k))*j12629k[j15397k]; (*j11530k)[0]+=(pow(j12183k,1.0)-pow(*j12370k,1.0))*pow(*j16174k,1.0); (*j11530k)[1]+=(pow(j12183k,2.0)-pow(*j12370k,2.0))*pow(*j16174k,2.0); (*j11530k)[2]+=(pow(j12183k,3.0)-pow(*j12370k,3.0))*pow(*j16174k,3.0); (*j11530k)[3]+=(pow(j12183k,4.0)-pow(*j12370k,4.0))*pow(*j16174k,4.0); (*j11530k)[4]+=(pow(j12183k,5.0)-pow(*j12370k,5.0))*pow(*j16174k,5.0); } (*j12370k)=j12183k; } } j17089k=&j11020k[6]; for( int j16731k = 0; j16731k < j11689k[6]; j16731k++ ) { for( int j12143k = 0; j12143k < j15574k; j12143k++ ) { j13754k++; j12370k=&j16520k[j13754k]; j19837k=0; j16766k=0; for( unsigned int j15397k = 0; j15397k < j16229k[j12143k].size(); j15397k++ ) { j18141k=&j16229k[j12143k][j15397k]; j16174k=&j15512k[j12143k][j15397k]; j11530k=&j17260k[6][j16731k][*j18141k]; j15582k=&j16852k[*j18141k]; j12629k[j15397k]=((0.001388889)*pow((*j11530k)[0],6.0))+((-0.02083333)*pow((*j11530k)[0],4.0)*pow((*j11530k)[1],1.0))+((-0.008333333)*pow((*j11530k)[0],5.0)*(*j16174k)*(*j12370k))+((0.0625)*pow((*j11530k)[0],2.0)*pow((*j11530k)[1],2.0))+((0.08333333)*pow((*j11530k)[0],3.0)*pow((*j11530k)[1],1.0)*(*j16174k)*(*j12370k))+((-0.02083333)*pow((*j11530k)[1],3.0))+((-0.125)*pow((*j11530k)[0],1.0)*pow((*j11530k)[1],2.0)*(*j16174k)*(*j12370k))+((0.05555556)*pow((*j11530k)[0],3.0)*pow((*j11530k)[2],1.0))+((0.04166667)*pow((*j11530k)[0],4.0)*pow((*j16174k)*(*j12370k),2.0))+((-0.1666667)*pow((*j11530k)[0],1.0)*pow((*j11530k)[1],1.0)*pow((*j11530k)[2],1.0))+((-0.1666667)*pow((*j11530k)[0],2.0)*(*j16174k)*(*j12370k)*pow((*j11530k)[2],1.0))+((-0.25)*pow((*j11530k)[0],2.0)*pow((*j11530k)[1],1.0)*pow((*j16174k)*(*j12370k),2.0))+((0.1666667)*pow((*j11530k)[1],1.0)*pow((*j11530k)[2],1.0)*(*j16174k)*(*j12370k))+((0.125)*pow((*j11530k)[1],2.0)*pow((*j16174k)*(*j12370k),2.0))+((0.05555556)*pow((*j11530k)[2],2.0))+((0.3333333)*pow((*j11530k)[0],1.0)*pow((*j11530k)[2],1.0)*pow((*j16174k)*(*j12370k),2.0))+((-0.125)*pow((*j11530k)[0],2.0)*pow((*j11530k)[3],1.0))+((-0.1666667)*pow((*j11530k)[0],3.0)*pow((*j16174k)*(*j12370k),3.0))+((0.125)*pow((*j11530k)[1],1.0)*pow((*j11530k)[3],1.0))+((0.25)*pow((*j11530k)[0],1.0)*(*j16174k)*(*j12370k)*pow((*j11530k)[3],1.0))+((0.5)*pow((*j11530k)[0],1.0)*pow((*j11530k)[1],1.0)*pow((*j16174k)*(*j12370k),3.0))+((-0.25)*pow((*j16174k)*(*j12370k),2.0)*pow((*j11530k)[3],1.0))+((-0.3333333)*pow((*j11530k)[2],1.0)*pow((*j16174k)*(*j12370k),3.0))+((0.2)*pow((*j11530k)[0],1.0)*pow((*j11530k)[4],1.0))+((0.5)*pow((*j11530k)[0],2.0)*pow((*j16174k)*(*j12370k),4.0))+((-0.2)*(*j16174k)*(*j12370k)*pow((*j11530k)[4],1.0))+((-0.5)*pow((*j11530k)[1],1.0)*pow((*j16174k)*(*j12370k),4.0))+((-0.1666667)*pow((*j11530k)[5],1.0))+((-1.0)*pow((*j11530k)[0],1.0)*pow((*j16174k)*(*j12370k),5.0))+((1.0)*pow((*j16174k)*(*j12370k),6.0)); j19837k+=(((*j15582k)-((*j12370k)*j12629k[j15397k]))*j12629k[j15397k]); j16766k+=pow(j12629k[j15397k],2.0)+(*j17089k); } j12183k=(-j19837k/j16766k); if(std::isinf(j12183k) || std::isnan(j12183k)) j12183k=0; for( unsigned int j15397k = 0; j15397k < j16229k[j12143k].size(); j15397k++ ) { j18141k=&j16229k[j12143k][j15397k]; j16174k=&j15512k[j12143k][j15397k]; j11530k=&j17260k[6][j16731k][*j18141k]; j15582k=&j16852k[*j18141k]; (*j15582k)+=(j12183k-(*j12370k))*j12629k[j15397k]; (*j11530k)[0]+=(pow(j12183k,1.0)-pow(*j12370k,1.0))*pow(*j16174k,1.0); (*j11530k)[1]+=(pow(j12183k,2.0)-pow(*j12370k,2.0))*pow(*j16174k,2.0); (*j11530k)[2]+=(pow(j12183k,3.0)-pow(*j12370k,3.0))*pow(*j16174k,3.0); (*j11530k)[3]+=(pow(j12183k,4.0)-pow(*j12370k,4.0))*pow(*j16174k,4.0); (*j11530k)[4]+=(pow(j12183k,5.0)-pow(*j12370k,5.0))*pow(*j16174k,5.0); (*j11530k)[5]+=(pow(j12183k,6.0)-pow(*j12370k,6.0))*pow(*j16174k,6.0); } (*j12370k)=j12183k; } } j17089k=&j11020k[7]; for( int j16731k = 0; j16731k < j11689k[7]; j16731k++ ) { for( int j12143k = 0; j12143k < j15574k; j12143k++ ) { j13754k++; j12370k=&j16520k[j13754k]; j19837k=0; j16766k=0; for( unsigned int j15397k = 0; j15397k < j16229k[j12143k].size(); j15397k++ ) { j18141k=&j16229k[j12143k][j15397k]; j16174k=&j15512k[j12143k][j15397k]; j11530k=&j17260k[7][j16731k][*j18141k]; j15582k=&j16852k[*j18141k]; j12629k[j15397k]=((0.0001984127)*pow((*j11530k)[0],7.0))+((-0.004166667)*pow((*j11530k)[0],5.0)*pow((*j11530k)[1],1.0))+((-0.001388889)*pow((*j11530k)[0],6.0)*(*j16174k)*(*j12370k))+((0.02083333)*pow((*j11530k)[0],3.0)*pow((*j11530k)[1],2.0))+((0.02083333)*pow((*j11530k)[0],4.0)*pow((*j11530k)[1],1.0)*(*j16174k)*(*j12370k))+((-0.02083333)*pow((*j11530k)[0],1.0)*pow((*j11530k)[1],3.0))+((-0.0625)*pow((*j11530k)[0],2.0)*pow((*j11530k)[1],2.0)*(*j16174k)*(*j12370k))+((0.02083333)*pow((*j11530k)[1],3.0)*(*j16174k)*(*j12370k))+((0.01388889)*pow((*j11530k)[0],4.0)*pow((*j11530k)[2],1.0))+((0.008333333)*pow((*j11530k)[0],5.0)*pow((*j16174k)*(*j12370k),2.0))+((-0.08333333)*pow((*j11530k)[0],2.0)*pow((*j11530k)[1],1.0)*pow((*j11530k)[2],1.0))+((-0.05555556)*pow((*j11530k)[0],3.0)*(*j16174k)*(*j12370k)*pow((*j11530k)[2],1.0))+((-0.08333333)*pow((*j11530k)[0],3.0)*pow((*j11530k)[1],1.0)*pow((*j16174k)*(*j12370k),2.0))+((0.04166667)*pow((*j11530k)[1],2.0)*pow((*j11530k)[2],1.0))+((0.1666667)*pow((*j11530k)[0],1.0)*pow((*j11530k)[1],1.0)*pow((*j11530k)[2],1.0)*(*j16174k)*(*j12370k))+((0.125)*pow((*j11530k)[0],1.0)*pow((*j11530k)[1],2.0)*pow((*j16174k)*(*j12370k),2.0))+((0.05555556)*pow((*j11530k)[0],1.0)*pow((*j11530k)[2],2.0))+((0.1666667)*pow((*j11530k)[0],2.0)*pow((*j11530k)[2],1.0)*pow((*j16174k)*(*j12370k),2.0))+((-0.05555556)*(*j16174k)*(*j12370k)*pow((*j11530k)[2],2.0))+((-0.1666667)*pow((*j11530k)[1],1.0)*pow((*j11530k)[2],1.0)*pow((*j16174k)*(*j12370k),2.0))+((-0.04166667)*pow((*j11530k)[0],3.0)*pow((*j11530k)[3],1.0))+((-0.04166667)*pow((*j11530k)[0],4.0)*pow((*j16174k)*(*j12370k),3.0))+((0.125)*pow((*j11530k)[0],1.0)*pow((*j11530k)[1],1.0)*pow((*j11530k)[3],1.0))+((0.125)*pow((*j11530k)[0],2.0)*(*j16174k)*(*j12370k)*pow((*j11530k)[3],1.0))+((0.25)*pow((*j11530k)[0],2.0)*pow((*j11530k)[1],1.0)*pow((*j16174k)*(*j12370k),3.0))+((-0.125)*pow((*j11530k)[1],1.0)*pow((*j11530k)[3],1.0)*(*j16174k)*(*j12370k))+((-0.125)*pow((*j11530k)[1],2.0)*pow((*j16174k)*(*j12370k),3.0))+((-0.08333333)*pow((*j11530k)[2],1.0)*pow((*j11530k)[3],1.0))+((-0.25)*pow((*j11530k)[0],1.0)*pow((*j16174k)*(*j12370k),2.0)*pow((*j11530k)[3],1.0))+((-0.3333333)*pow((*j11530k)[0],1.0)*pow((*j11530k)[2],1.0)*pow((*j16174k)*(*j12370k),3.0))+((0.25)*pow((*j11530k)[3],1.0)*pow((*j16174k)*(*j12370k),3.0))+((0.1)*pow((*j11530k)[0],2.0)*pow((*j11530k)[4],1.0))+((0.1666667)*pow((*j11530k)[0],3.0)*pow((*j16174k)*(*j12370k),4.0))+((-0.1)*pow((*j11530k)[1],1.0)*pow((*j11530k)[4],1.0))+((-0.2)*pow((*j11530k)[0],1.0)*(*j16174k)*(*j12370k)*pow((*j11530k)[4],1.0))+((-0.5)*pow((*j11530k)[0],1.0)*pow((*j11530k)[1],1.0)*pow((*j16174k)*(*j12370k),4.0))+((0.2)*pow((*j16174k)*(*j12370k),2.0)*pow((*j11530k)[4],1.0))+((0.3333333)*pow((*j11530k)[2],1.0)*pow((*j16174k)*(*j12370k),4.0))+((-0.1666667)*pow((*j11530k)[0],1.0)*pow((*j11530k)[5],1.0))+((-0.5)*pow((*j11530k)[0],2.0)*pow((*j16174k)*(*j12370k),5.0))+((0.1666667)*(*j16174k)*(*j12370k)*pow((*j11530k)[5],1.0))+((0.5)*pow((*j11530k)[1],1.0)*pow((*j16174k)*(*j12370k),5.0))+((0.1428571)*pow((*j11530k)[6],1.0))+((1.0)*pow((*j11530k)[0],1.0)*pow((*j16174k)*(*j12370k),6.0))+((-1.0)*pow((*j16174k)*(*j12370k),7.0)); j19837k+=(((*j15582k)-((*j12370k)*j12629k[j15397k]))*j12629k[j15397k]); j16766k+=pow(j12629k[j15397k],2.0)+(*j17089k); } j12183k=(-j19837k/j16766k); if(std::isinf(j12183k) || std::isnan(j12183k)) j12183k=0; for( unsigned int j15397k = 0; j15397k < j16229k[j12143k].size(); j15397k++ ) { j18141k=&j16229k[j12143k][j15397k]; j16174k=&j15512k[j12143k][j15397k]; j11530k=&j17260k[7][j16731k][*j18141k]; j15582k=&j16852k[*j18141k]; (*j15582k)+=(j12183k-(*j12370k))*j12629k[j15397k]; (*j11530k)[0]+=(pow(j12183k,1.0)-pow(*j12370k,1.0))*pow(*j16174k,1.0); (*j11530k)[1]+=(pow(j12183k,2.0)-pow(*j12370k,2.0))*pow(*j16174k,2.0); (*j11530k)[2]+=(pow(j12183k,3.0)-pow(*j12370k,3.0))*pow(*j16174k,3.0); (*j11530k)[3]+=(pow(j12183k,4.0)-pow(*j12370k,4.0))*pow(*j16174k,4.0); (*j11530k)[4]+=(pow(j12183k,5.0)-pow(*j12370k,5.0))*pow(*j16174k,5.0); (*j11530k)[5]+=(pow(j12183k,6.0)-pow(*j12370k,6.0))*pow(*j16174k,6.0); (*j11530k)[6]+=(pow(j12183k,7.0)-pow(*j12370k,7.0))*pow(*j16174k,7.0); } (*j12370k)=j12183k; } } j17089k=&j11020k[8]; for( int j16731k = 0; j16731k < j11689k[8]; j16731k++ ) { for( int j12143k = 0; j12143k < j15574k; j12143k++ ) { j13754k++; j12370k=&j16520k[j13754k]; j19837k=0; j16766k=0; for( unsigned int j15397k = 0; j15397k < j16229k[j12143k].size(); j15397k++ ) { j18141k=&j16229k[j12143k][j15397k]; j16174k=&j15512k[j12143k][j15397k]; j11530k=&j17260k[8][j16731k][*j18141k]; j15582k=&j16852k[*j18141k]; j12629k[j15397k]=((2.480159e-05)*pow((*j11530k)[0],8.0))+((-0.0006944444)*pow((*j11530k)[0],6.0)*pow((*j11530k)[1],1.0))+((-0.0001984127)*pow((*j11530k)[0],7.0)*(*j16174k)*(*j12370k))+((0.005208333)*pow((*j11530k)[0],4.0)*pow((*j11530k)[1],2.0))+((0.004166667)*pow((*j11530k)[0],5.0)*pow((*j11530k)[1],1.0)*(*j16174k)*(*j12370k))+((-0.01041667)*pow((*j11530k)[0],2.0)*pow((*j11530k)[1],3.0))+((-0.02083333)*pow((*j11530k)[0],3.0)*pow((*j11530k)[1],2.0)*(*j16174k)*(*j12370k))+((0.002604167)*pow((*j11530k)[1],4.0))+((0.02083333)*pow((*j11530k)[0],1.0)*pow((*j11530k)[1],3.0)*(*j16174k)*(*j12370k))+((0.002777778)*pow((*j11530k)[0],5.0)*pow((*j11530k)[2],1.0))+((0.001388889)*pow((*j11530k)[0],6.0)*pow((*j16174k)*(*j12370k),2.0))+((-0.02777778)*pow((*j11530k)[0],3.0)*pow((*j11530k)[1],1.0)*pow((*j11530k)[2],1.0))+((-0.01388889)*pow((*j11530k)[0],4.0)*(*j16174k)*(*j12370k)*pow((*j11530k)[2],1.0))+((-0.02083333)*pow((*j11530k)[0],4.0)*pow((*j11530k)[1],1.0)*pow((*j16174k)*(*j12370k),2.0))+((0.04166667)*pow((*j11530k)[0],1.0)*pow((*j11530k)[1],2.0)*pow((*j11530k)[2],1.0))+((0.08333333)*pow((*j11530k)[0],2.0)*pow((*j11530k)[1],1.0)*pow((*j11530k)[2],1.0)*(*j16174k)*(*j12370k))+((0.0625)*pow((*j11530k)[0],2.0)*pow((*j11530k)[1],2.0)*pow((*j16174k)*(*j12370k),2.0))+((-0.04166667)*pow((*j11530k)[1],2.0)*pow((*j11530k)[2],1.0)*(*j16174k)*(*j12370k))+((-0.02083333)*pow((*j11530k)[1],3.0)*pow((*j16174k)*(*j12370k),2.0))+((0.02777778)*pow((*j11530k)[0],2.0)*pow((*j11530k)[2],2.0))+((0.05555556)*pow((*j11530k)[0],3.0)*pow((*j11530k)[2],1.0)*pow((*j16174k)*(*j12370k),2.0))+((-0.02777778)*pow((*j11530k)[1],1.0)*pow((*j11530k)[2],2.0))+((-0.05555556)*pow((*j11530k)[0],1.0)*(*j16174k)*(*j12370k)*pow((*j11530k)[2],2.0))+((-0.1666667)*pow((*j11530k)[0],1.0)*pow((*j11530k)[1],1.0)*pow((*j11530k)[2],1.0)*pow((*j16174k)*(*j12370k),2.0))+((0.05555556)*pow((*j11530k)[2],2.0)*pow((*j16174k)*(*j12370k),2.0))+((-0.01041667)*pow((*j11530k)[0],4.0)*pow((*j11530k)[3],1.0))+((-0.008333333)*pow((*j11530k)[0],5.0)*pow((*j16174k)*(*j12370k),3.0))+((0.0625)*pow((*j11530k)[0],2.0)*pow((*j11530k)[1],1.0)*pow((*j11530k)[3],1.0))+((0.04166667)*pow((*j11530k)[0],3.0)*(*j16174k)*(*j12370k)*pow((*j11530k)[3],1.0))+((0.08333333)*pow((*j11530k)[0],3.0)*pow((*j11530k)[1],1.0)*pow((*j16174k)*(*j12370k),3.0))+((-0.03125)*pow((*j11530k)[1],2.0)*pow((*j11530k)[3],1.0))+((-0.125)*pow((*j11530k)[0],1.0)*pow((*j11530k)[1],1.0)*pow((*j11530k)[3],1.0)*(*j16174k)*(*j12370k))+((-0.125)*pow((*j11530k)[0],1.0)*pow((*j11530k)[1],2.0)*pow((*j16174k)*(*j12370k),3.0))+((-0.08333333)*pow((*j11530k)[0],1.0)*pow((*j11530k)[2],1.0)*pow((*j11530k)[3],1.0))+((-0.125)*pow((*j11530k)[0],2.0)*pow((*j16174k)*(*j12370k),2.0)*pow((*j11530k)[3],1.0))+((-0.1666667)*pow((*j11530k)[0],2.0)*pow((*j11530k)[2],1.0)*pow((*j16174k)*(*j12370k),3.0))+((0.08333333)*(*j16174k)*(*j12370k)*pow((*j11530k)[2],1.0)*pow((*j11530k)[3],1.0))+((0.125)*pow((*j11530k)[1],1.0)*pow((*j16174k)*(*j12370k),2.0)*pow((*j11530k)[3],1.0))+((0.1666667)*pow((*j11530k)[1],1.0)*pow((*j11530k)[2],1.0)*pow((*j16174k)*(*j12370k),3.0))+((0.03125)*pow((*j11530k)[3],2.0))+((0.25)*pow((*j11530k)[0],1.0)*pow((*j11530k)[3],1.0)*pow((*j16174k)*(*j12370k),3.0))+((0.03333333)*pow((*j11530k)[0],3.0)*pow((*j11530k)[4],1.0))+((0.04166667)*pow((*j11530k)[0],4.0)*pow((*j16174k)*(*j12370k),4.0))+((-0.1)*pow((*j11530k)[0],1.0)*pow((*j11530k)[1],1.0)*pow((*j11530k)[4],1.0))+((-0.1)*pow((*j11530k)[0],2.0)*(*j16174k)*(*j12370k)*pow((*j11530k)[4],1.0))+((-0.25)*pow((*j11530k)[0],2.0)*pow((*j11530k)[1],1.0)*pow((*j16174k)*(*j12370k),4.0))+((0.1)*pow((*j11530k)[1],1.0)*pow((*j11530k)[4],1.0)*(*j16174k)*(*j12370k))+((0.125)*pow((*j11530k)[1],2.0)*pow((*j16174k)*(*j12370k),4.0))+((0.06666667)*pow((*j11530k)[2],1.0)*pow((*j11530k)[4],1.0))+((0.2)*pow((*j11530k)[0],1.0)*pow((*j16174k)*(*j12370k),2.0)*pow((*j11530k)[4],1.0))+((0.3333333)*pow((*j11530k)[0],1.0)*pow((*j11530k)[2],1.0)*pow((*j16174k)*(*j12370k),4.0))+((-0.2)*pow((*j16174k)*(*j12370k),3.0)*pow((*j11530k)[4],1.0))+((-0.25)*pow((*j11530k)[3],1.0)*pow((*j16174k)*(*j12370k),4.0))+((-0.08333333)*pow((*j11530k)[0],2.0)*pow((*j11530k)[5],1.0))+((-0.1666667)*pow((*j11530k)[0],3.0)*pow((*j16174k)*(*j12370k),5.0))+((0.08333333)*pow((*j11530k)[1],1.0)*pow((*j11530k)[5],1.0))+((0.1666667)*pow((*j11530k)[0],1.0)*(*j16174k)*(*j12370k)*pow((*j11530k)[5],1.0))+((0.5)*pow((*j11530k)[0],1.0)*pow((*j11530k)[1],1.0)*pow((*j16174k)*(*j12370k),5.0))+((-0.1666667)*pow((*j16174k)*(*j12370k),2.0)*pow((*j11530k)[5],1.0))+((-0.3333333)*pow((*j11530k)[2],1.0)*pow((*j16174k)*(*j12370k),5.0))+((0.1428571)*pow((*j11530k)[0],1.0)*pow((*j11530k)[6],1.0))+((0.5)*pow((*j11530k)[0],2.0)*pow((*j16174k)*(*j12370k),6.0))+((-0.1428571)*(*j16174k)*(*j12370k)*pow((*j11530k)[6],1.0))+((-0.5)*pow((*j11530k)[1],1.0)*pow((*j16174k)*(*j12370k),6.0))+((-0.125)*pow((*j11530k)[7],1.0))+((-1.0)*pow((*j11530k)[0],1.0)*pow((*j16174k)*(*j12370k),7.0))+((1.0)*pow((*j16174k)*(*j12370k),8.0)); j19837k+=(((*j15582k)-((*j12370k)*j12629k[j15397k]))*j12629k[j15397k]); j16766k+=pow(j12629k[j15397k],2.0)+(*j17089k); } j12183k=(-j19837k/j16766k); if(std::isinf(j12183k) || std::isnan(j12183k)) j12183k=0; for( unsigned int j15397k = 0; j15397k < j16229k[j12143k].size(); j15397k++ ) { j18141k=&j16229k[j12143k][j15397k]; j16174k=&j15512k[j12143k][j15397k]; j11530k=&j17260k[8][j16731k][*j18141k]; j15582k=&j16852k[*j18141k]; (*j15582k)+=(j12183k-(*j12370k))*j12629k[j15397k]; (*j11530k)[0]+=(pow(j12183k,1.0)-pow(*j12370k,1.0))*pow(*j16174k,1.0); (*j11530k)[1]+=(pow(j12183k,2.0)-pow(*j12370k,2.0))*pow(*j16174k,2.0); (*j11530k)[2]+=(pow(j12183k,3.0)-pow(*j12370k,3.0))*pow(*j16174k,3.0); (*j11530k)[3]+=(pow(j12183k,4.0)-pow(*j12370k,4.0))*pow(*j16174k,4.0); (*j11530k)[4]+=(pow(j12183k,5.0)-pow(*j12370k,5.0))*pow(*j16174k,5.0); (*j11530k)[5]+=(pow(j12183k,6.0)-pow(*j12370k,6.0))*pow(*j16174k,6.0); (*j11530k)[6]+=(pow(j12183k,7.0)-pow(*j12370k,7.0))*pow(*j16174k,7.0); (*j11530k)[7]+=(pow(j12183k,8.0)-pow(*j12370k,8.0))*pow(*j16174k,8.0); } (*j12370k)=j12183k; } } j17089k=&j11020k[9]; for( int j16731k = 0; j16731k < j11689k[9]; j16731k++ ) { for( int j12143k = 0; j12143k < j15574k; j12143k++ ) { j13754k++; j12370k=&j16520k[j13754k]; j19837k=0; j16766k=0; for( unsigned int j15397k = 0; j15397k < j16229k[j12143k].size(); j15397k++ ) { j18141k=&j16229k[j12143k][j15397k]; j16174k=&j15512k[j12143k][j15397k]; j11530k=&j17260k[9][j16731k][*j18141k]; j15582k=&j16852k[*j18141k]; j12629k[j15397k]=((2.755732e-06)*pow((*j11530k)[0],9.0))+((-9.920635e-05)*pow((*j11530k)[0],7.0)*pow((*j11530k)[1],1.0))+((-2.480159e-05)*pow((*j11530k)[0],8.0)*(*j16174k)*(*j12370k))+((0.001041667)*pow((*j11530k)[0],5.0)*pow((*j11530k)[1],2.0))+((0.0006944444)*pow((*j11530k)[0],6.0)*pow((*j11530k)[1],1.0)*(*j16174k)*(*j12370k))+((-0.003472222)*pow((*j11530k)[0],3.0)*pow((*j11530k)[1],3.0))+((-0.005208333)*pow((*j11530k)[0],4.0)*pow((*j11530k)[1],2.0)*(*j16174k)*(*j12370k))+((0.002604167)*pow((*j11530k)[0],1.0)*pow((*j11530k)[1],4.0))+((0.01041667)*pow((*j11530k)[0],2.0)*pow((*j11530k)[1],3.0)*(*j16174k)*(*j12370k))+((-0.002604167)*pow((*j11530k)[1],4.0)*(*j16174k)*(*j12370k))+((0.000462963)*pow((*j11530k)[0],6.0)*pow((*j11530k)[2],1.0))+((0.0001984127)*pow((*j11530k)[0],7.0)*pow((*j16174k)*(*j12370k),2.0))+((-0.006944444)*pow((*j11530k)[0],4.0)*pow((*j11530k)[1],1.0)*pow((*j11530k)[2],1.0))+((-0.002777778)*pow((*j11530k)[0],5.0)*(*j16174k)*(*j12370k)*pow((*j11530k)[2],1.0))+((-0.004166667)*pow((*j11530k)[0],5.0)*pow((*j11530k)[1],1.0)*pow((*j16174k)*(*j12370k),2.0))+((0.02083333)*pow((*j11530k)[0],2.0)*pow((*j11530k)[1],2.0)*pow((*j11530k)[2],1.0))+((0.02777778)*pow((*j11530k)[0],3.0)*pow((*j11530k)[1],1.0)*pow((*j11530k)[2],1.0)*(*j16174k)*(*j12370k))+((0.02083333)*pow((*j11530k)[0],3.0)*pow((*j11530k)[1],2.0)*pow((*j16174k)*(*j12370k),2.0))+((-0.006944444)*pow((*j11530k)[1],3.0)*pow((*j11530k)[2],1.0))+((-0.04166667)*pow((*j11530k)[0],1.0)*pow((*j11530k)[1],2.0)*pow((*j11530k)[2],1.0)*(*j16174k)*(*j12370k))+((-0.02083333)*pow((*j11530k)[0],1.0)*pow((*j11530k)[1],3.0)*pow((*j16174k)*(*j12370k),2.0))+((0.009259259)*pow((*j11530k)[0],3.0)*pow((*j11530k)[2],2.0))+((0.01388889)*pow((*j11530k)[0],4.0)*pow((*j11530k)[2],1.0)*pow((*j16174k)*(*j12370k),2.0))+((-0.02777778)*pow((*j11530k)[0],1.0)*pow((*j11530k)[1],1.0)*pow((*j11530k)[2],2.0))+((-0.02777778)*pow((*j11530k)[0],2.0)*(*j16174k)*(*j12370k)*pow((*j11530k)[2],2.0))+((-0.08333333)*pow((*j11530k)[0],2.0)*pow((*j11530k)[1],1.0)*pow((*j11530k)[2],1.0)*pow((*j16174k)*(*j12370k),2.0))+((0.02777778)*pow((*j11530k)[1],1.0)*pow((*j11530k)[2],2.0)*(*j16174k)*(*j12370k))+((0.04166667)*pow((*j11530k)[1],2.0)*pow((*j11530k)[2],1.0)*pow((*j16174k)*(*j12370k),2.0))+((0.00617284)*pow((*j11530k)[2],3.0))+((0.05555556)*pow((*j11530k)[0],1.0)*pow((*j11530k)[2],2.0)*pow((*j16174k)*(*j12370k),2.0))+((-0.002083333)*pow((*j11530k)[0],5.0)*pow((*j11530k)[3],1.0))+((-0.001388889)*pow((*j11530k)[0],6.0)*pow((*j16174k)*(*j12370k),3.0))+((0.02083333)*pow((*j11530k)[0],3.0)*pow((*j11530k)[1],1.0)*pow((*j11530k)[3],1.0))+((0.01041667)*pow((*j11530k)[0],4.0)*(*j16174k)*(*j12370k)*pow((*j11530k)[3],1.0))+((0.02083333)*pow((*j11530k)[0],4.0)*pow((*j11530k)[1],1.0)*pow((*j16174k)*(*j12370k),3.0))+((-0.03125)*pow((*j11530k)[0],1.0)*pow((*j11530k)[1],2.0)*pow((*j11530k)[3],1.0))+((-0.0625)*pow((*j11530k)[0],2.0)*pow((*j11530k)[1],1.0)*pow((*j11530k)[3],1.0)*(*j16174k)*(*j12370k))+((-0.0625)*pow((*j11530k)[0],2.0)*pow((*j11530k)[1],2.0)*pow((*j16174k)*(*j12370k),3.0))+((0.03125)*pow((*j11530k)[1],2.0)*pow((*j11530k)[3],1.0)*(*j16174k)*(*j12370k))+((0.02083333)*pow((*j11530k)[1],3.0)*pow((*j16174k)*(*j12370k),3.0))+((-0.04166667)*pow((*j11530k)[0],2.0)*pow((*j11530k)[2],1.0)*pow((*j11530k)[3],1.0))+((-0.04166667)*pow((*j11530k)[0],3.0)*pow((*j16174k)*(*j12370k),2.0)*pow((*j11530k)[3],1.0))+((-0.05555556)*pow((*j11530k)[0],3.0)*pow((*j11530k)[2],1.0)*pow((*j16174k)*(*j12370k),3.0))+((0.04166667)*pow((*j11530k)[1],1.0)*pow((*j11530k)[2],1.0)*pow((*j11530k)[3],1.0))+((0.08333333)*pow((*j11530k)[0],1.0)*(*j16174k)*(*j12370k)*pow((*j11530k)[2],1.0)*pow((*j11530k)[3],1.0))+((0.125)*pow((*j11530k)[0],1.0)*pow((*j11530k)[1],1.0)*pow((*j16174k)*(*j12370k),2.0)*pow((*j11530k)[3],1.0))+((0.1666667)*pow((*j11530k)[0],1.0)*pow((*j11530k)[1],1.0)*pow((*j11530k)[2],1.0)*pow((*j16174k)*(*j12370k),3.0))+((-0.08333333)*pow((*j11530k)[2],1.0)*pow((*j11530k)[3],1.0)*pow((*j16174k)*(*j12370k),2.0))+((-0.05555556)*pow((*j11530k)[2],2.0)*pow((*j16174k)*(*j12370k),3.0))+((0.03125)*pow((*j11530k)[0],1.0)*pow((*j11530k)[3],2.0))+((0.125)*pow((*j11530k)[0],2.0)*pow((*j11530k)[3],1.0)*pow((*j16174k)*(*j12370k),3.0))+((-0.03125)*(*j16174k)*(*j12370k)*pow((*j11530k)[3],2.0))+((-0.125)*pow((*j11530k)[1],1.0)*pow((*j11530k)[3],1.0)*pow((*j16174k)*(*j12370k),3.0))+((0.008333333)*pow((*j11530k)[0],4.0)*pow((*j11530k)[4],1.0))+((0.008333333)*pow((*j11530k)[0],5.0)*pow((*j16174k)*(*j12370k),4.0))+((-0.05)*pow((*j11530k)[0],2.0)*pow((*j11530k)[1],1.0)*pow((*j11530k)[4],1.0))+((-0.03333333)*pow((*j11530k)[0],3.0)*(*j16174k)*(*j12370k)*pow((*j11530k)[4],1.0))+((-0.08333333)*pow((*j11530k)[0],3.0)*pow((*j11530k)[1],1.0)*pow((*j16174k)*(*j12370k),4.0))+((0.025)*pow((*j11530k)[1],2.0)*pow((*j11530k)[4],1.0))+((0.1)*pow((*j11530k)[0],1.0)*pow((*j11530k)[1],1.0)*pow((*j11530k)[4],1.0)*(*j16174k)*(*j12370k))+((0.125)*pow((*j11530k)[0],1.0)*pow((*j11530k)[1],2.0)*pow((*j16174k)*(*j12370k),4.0))+((0.06666667)*pow((*j11530k)[0],1.0)*pow((*j11530k)[2],1.0)*pow((*j11530k)[4],1.0))+((0.1)*pow((*j11530k)[0],2.0)*pow((*j16174k)*(*j12370k),2.0)*pow((*j11530k)[4],1.0))+((0.1666667)*pow((*j11530k)[0],2.0)*pow((*j11530k)[2],1.0)*pow((*j16174k)*(*j12370k),4.0))+((-0.06666667)*(*j16174k)*(*j12370k)*pow((*j11530k)[2],1.0)*pow((*j11530k)[4],1.0))+((-0.1)*pow((*j11530k)[1],1.0)*pow((*j16174k)*(*j12370k),2.0)*pow((*j11530k)[4],1.0))+((-0.1666667)*pow((*j11530k)[1],1.0)*pow((*j11530k)[2],1.0)*pow((*j16174k)*(*j12370k),4.0))+((-0.05)*pow((*j11530k)[3],1.0)*pow((*j11530k)[4],1.0))+((-0.2)*pow((*j11530k)[0],1.0)*pow((*j16174k)*(*j12370k),3.0)*pow((*j11530k)[4],1.0))+((-0.25)*pow((*j11530k)[0],1.0)*pow((*j11530k)[3],1.0)*pow((*j16174k)*(*j12370k),4.0))+((0.2)*pow((*j11530k)[4],1.0)*pow((*j16174k)*(*j12370k),4.0))+((-0.02777778)*pow((*j11530k)[0],3.0)*pow((*j11530k)[5],1.0))+((-0.04166667)*pow((*j11530k)[0],4.0)*pow((*j16174k)*(*j12370k),5.0))+((0.08333333)*pow((*j11530k)[0],1.0)*pow((*j11530k)[1],1.0)*pow((*j11530k)[5],1.0))+((0.08333333)*pow((*j11530k)[0],2.0)*(*j16174k)*(*j12370k)*pow((*j11530k)[5],1.0))+((0.25)*pow((*j11530k)[0],2.0)*pow((*j11530k)[1],1.0)*pow((*j16174k)*(*j12370k),5.0))+((-0.08333333)*pow((*j11530k)[1],1.0)*pow((*j11530k)[5],1.0)*(*j16174k)*(*j12370k))+((-0.125)*pow((*j11530k)[1],2.0)*pow((*j16174k)*(*j12370k),5.0))+((-0.05555556)*pow((*j11530k)[2],1.0)*pow((*j11530k)[5],1.0))+((-0.1666667)*pow((*j11530k)[0],1.0)*pow((*j16174k)*(*j12370k),2.0)*pow((*j11530k)[5],1.0))+((-0.3333333)*pow((*j11530k)[0],1.0)*pow((*j11530k)[2],1.0)*pow((*j16174k)*(*j12370k),5.0))+((0.1666667)*pow((*j16174k)*(*j12370k),3.0)*pow((*j11530k)[5],1.0))+((0.25)*pow((*j11530k)[3],1.0)*pow((*j16174k)*(*j12370k),5.0))+((0.07142857)*pow((*j11530k)[0],2.0)*pow((*j11530k)[6],1.0))+((0.1666667)*pow((*j11530k)[0],3.0)*pow((*j16174k)*(*j12370k),6.0))+((-0.07142857)*pow((*j11530k)[1],1.0)*pow((*j11530k)[6],1.0))+((-0.1428571)*pow((*j11530k)[0],1.0)*(*j16174k)*(*j12370k)*pow((*j11530k)[6],1.0))+((-0.5)*pow((*j11530k)[0],1.0)*pow((*j11530k)[1],1.0)*pow((*j16174k)*(*j12370k),6.0))+((0.1428571)*pow((*j16174k)*(*j12370k),2.0)*pow((*j11530k)[6],1.0))+((0.3333333)*pow((*j11530k)[2],1.0)*pow((*j16174k)*(*j12370k),6.0))+((-0.125)*pow((*j11530k)[0],1.0)*pow((*j11530k)[7],1.0))+((-0.5)*pow((*j11530k)[0],2.0)*pow((*j16174k)*(*j12370k),7.0))+((0.125)*(*j16174k)*(*j12370k)*pow((*j11530k)[7],1.0))+((0.5)*pow((*j11530k)[1],1.0)*pow((*j16174k)*(*j12370k),7.0))+((0.1111111)*pow((*j11530k)[8],1.0))+((1.0)*pow((*j11530k)[0],1.0)*pow((*j16174k)*(*j12370k),8.0))+((-1.0)*pow((*j16174k)*(*j12370k),9.0)); j19837k+=(((*j15582k)-((*j12370k)*j12629k[j15397k]))*j12629k[j15397k]); j16766k+=pow(j12629k[j15397k],2.0)+(*j17089k); } j12183k=(-j19837k/j16766k); if(std::isinf(j12183k) || std::isnan(j12183k)) j12183k=0; for( unsigned int j15397k = 0; j15397k < j16229k[j12143k].size(); j15397k++ ) { j18141k=&j16229k[j12143k][j15397k]; j16174k=&j15512k[j12143k][j15397k]; j11530k=&j17260k[9][j16731k][*j18141k]; j15582k=&j16852k[*j18141k]; (*j15582k)+=(j12183k-(*j12370k))*j12629k[j15397k]; (*j11530k)[0]+=(pow(j12183k,1.0)-pow(*j12370k,1.0))*pow(*j16174k,1.0); (*j11530k)[1]+=(pow(j12183k,2.0)-pow(*j12370k,2.0))*pow(*j16174k,2.0); (*j11530k)[2]+=(pow(j12183k,3.0)-pow(*j12370k,3.0))*pow(*j16174k,3.0); (*j11530k)[3]+=(pow(j12183k,4.0)-pow(*j12370k,4.0))*pow(*j16174k,4.0); (*j11530k)[4]+=(pow(j12183k,5.0)-pow(*j12370k,5.0))*pow(*j16174k,5.0); (*j11530k)[5]+=(pow(j12183k,6.0)-pow(*j12370k,6.0))*pow(*j16174k,6.0); (*j11530k)[6]+=(pow(j12183k,7.0)-pow(*j12370k,7.0))*pow(*j16174k,7.0); (*j11530k)[7]+=(pow(j12183k,8.0)-pow(*j12370k,8.0))*pow(*j16174k,8.0); (*j11530k)[8]+=(pow(j12183k,9.0)-pow(*j12370k,9.0))*pow(*j16174k,9.0); } (*j12370k)=j12183k; } } } for(unsigned int j12801k=j11689k.size()-1;j12801k>0;j12801k--) if(j11689k[j12801k]==0) j11689k.resize(j12801k); else break; List j10587k=Rcpp::List::create(Rcpp::Named("weights") = j16520k, Rcpp::Named("factors") = j11689k, Rcpp::Named("variables") = j15574k, Rcpp::Named("traincases") = j16917k, Rcpp::Named("min.target") = j17945k, Rcpp::Named("max.target") = j13741k); j10587k.attr("class") = "FMmodel"; return j10587k; }
// [[Rcpp::export]]
NumericVector predictFM(List j14686k) { NumericMatrix j15485k = as< NumericMatrix >(j14686k["mX"]); std::vector<int> j11689k = as< std::vector<int> >(j14686k["factors"]); std::vector<double> j16520k = as< std::vector<double> >(j14686k["weights"]); bool j11058k=(j14686k["truncate"]); double j17945k=(j14686k["min.target"]); double j13741k=(j14686k["max.target"]); int j15574k=(j14686k["variables"]); int j16917k=(j14686k["traincases"]); std::vector<double>* j11530k; int j11593k=j11689k.size(); int *j18141k; double* j16174k; double* j12370k; int j13754k; std::vector< std::vector<int> >j16229k(j15574k); std::vector< std::vector<double> >j15512k(j15574k); for(int j15397k = 0; j15397k < j15485k.nrow(); j15397k++ ){ j16229k[j15485k(j15397k,1)].push_back(j15485k(j15397k,0)); j15512k[j15485k(j15397k,1)].push_back(j15485k(j15397k,2)); } std::vector< std::vector< std::vector< std::vector<double> > > > j17260k; j17260k.resize(j11593k); for(int j12801k = 0; j12801k < j11593k; j12801k++ ) { j17260k[j12801k].resize(j11689k[j12801k]); for(int j16072k = 0; j16072k < j11689k[j12801k]; j16072k++ ) { j17260k[j12801k][j16072k].resize(j16917k); for(int j15925k = 0; j15925k < j16917k; j15925k++ ){ j17260k[j12801k][j16072k][j15925k].resize(j12801k+1); for(int j18694k = 0; j18694k < j12801k+1; j18694k++ ) j17260k[j12801k][j16072k][j15925k][j18694k]=0; } } } for(unsigned int j12801k = 0; j12801k < j17260k.size(); j12801k++ ) { for(unsigned int j16072k = 0; j16072k < j17260k[j12801k].size(); j16072k++ ) { for(unsigned int j15925k = 0; j15925k < j17260k[j12801k][j16072k].size(); j15925k++ ){ for(unsigned int j18694k = 0; j18694k < j17260k[j12801k][j16072k][j15925k].size(); j18694k++ ) j17260k[j12801k][j16072k][j15925k][j18694k]=0; } } } j13754k=0; for(int j11206k = 0; j11206k < j11593k; j11206k++ ) { for( int j16731k = 0; j16731k < j11689k[j11206k]; j16731k++ ) { for( int j12143k = 0; j12143k < j15574k; j12143k++ ) { j13754k++; j12370k=&j16520k[j13754k]; for( unsigned int j15397k = 0; j15397k < j16229k[j12143k].size(); j15397k++ ) { j18141k=&j16229k[j12143k][j15397k]; j16174k=&j15512k[j12143k][j15397k]; j11530k=&j17260k[j11206k][j16731k][*j18141k]; for( unsigned int j19963k = 1; j19963k <= (*j11530k).size(); j19963k++ ) { (*j11530k)[j19963k-1]+=pow(*j16174k,(double) j19963k)*pow(*j12370k,(double) j19963k); } } } } } NumericVector j16956k(j16917k,j16520k[0]); std::vector< std::vector<double> >* j11336k; for(int j11206k = 0; j11206k < j11593k; j11206k++ ) { for( int j16731k = 0; j16731k < j11689k[j11206k]; j16731k++ ) { j11336k=&j17260k[j11206k][j16731k]; if(j11206k==0) for(unsigned int j15397k = 0; j15397k < (*j11336k).size(); j15397k++ ) j16956k[j15397k]+=(*j11336k)[j15397k][0]; if(j11206k==1) for(unsigned int j15397k = 0; j15397k < (*j11336k).size(); j15397k++ ) j16956k[j15397k]+=(0.5*pow((*j11336k)[j15397k][0], 2.0))+(-0.5*pow((*j11336k)[j15397k][1], 1.0)); if(j11206k==2) for(unsigned int j15397k = 0; j15397k < (*j11336k).size(); j15397k++ ) j16956k[j15397k]+=(0.1666667*pow((*j11336k)[j15397k][0], 3.0))+(-0.5*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][1], 1.0))+(0.3333333*pow((*j11336k)[j15397k][2], 1.0)); if(j11206k==3) for(unsigned int j15397k = 0; j15397k < (*j11336k).size(); j15397k++ ) j16956k[j15397k]+=(0.04166667*pow((*j11336k)[j15397k][0], 4.0))+(-0.25*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][1], 1.0))+(0.125*pow((*j11336k)[j15397k][1], 2.0))+(0.3333333*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][2], 1.0))+(-0.25*pow((*j11336k)[j15397k][3], 1.0)); if(j11206k==4) for(unsigned int j15397k = 0; j15397k < (*j11336k).size(); j15397k++ ) j16956k[j15397k]+=(0.008333333*pow((*j11336k)[j15397k][0], 5.0))+(-0.08333333*pow((*j11336k)[j15397k][0], 3.0)*pow((*j11336k)[j15397k][1], 1.0))+(0.125*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][1], 2.0))+(0.1666667*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][2], 1.0))+(-0.1666667*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][2], 1.0))+(-0.25*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][3], 1.0))+(0.2*pow((*j11336k)[j15397k][4], 1.0)); if(j11206k==5) for(unsigned int j15397k = 0; j15397k < (*j11336k).size(); j15397k++ ) j16956k[j15397k]+=(0.001388889*pow((*j11336k)[j15397k][0], 6.0))+(-0.02083333*pow((*j11336k)[j15397k][0], 4.0)*pow((*j11336k)[j15397k][1], 1.0))+(0.0625*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][1], 2.0))+(-0.02083333*pow((*j11336k)[j15397k][1], 3.0))+(0.05555556*pow((*j11336k)[j15397k][0], 3.0)*pow((*j11336k)[j15397k][2], 1.0))+(-0.1666667*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][2], 1.0))+(0.05555556*pow((*j11336k)[j15397k][2], 2.0))+(-0.125*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][3], 1.0))+(0.125*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][3], 1.0))+(0.2*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][4], 1.0))+(-0.1666667*pow((*j11336k)[j15397k][5], 1.0)); if(j11206k==6) for(unsigned int j15397k = 0; j15397k < (*j11336k).size(); j15397k++ ) j16956k[j15397k]+=(0.0001984127*pow((*j11336k)[j15397k][0], 7.0))+(-0.004166667*pow((*j11336k)[j15397k][0], 5.0)*pow((*j11336k)[j15397k][1], 1.0))+(0.02083333*pow((*j11336k)[j15397k][0], 3.0)*pow((*j11336k)[j15397k][1], 2.0))+(-0.02083333*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][1], 3.0))+(0.01388889*pow((*j11336k)[j15397k][0], 4.0)*pow((*j11336k)[j15397k][2], 1.0))+(-0.08333333*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][2], 1.0))+(0.04166667*pow((*j11336k)[j15397k][1], 2.0)*pow((*j11336k)[j15397k][2], 1.0))+(0.05555556*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][2], 2.0))+(-0.04166667*pow((*j11336k)[j15397k][0], 3.0)*pow((*j11336k)[j15397k][3], 1.0))+(0.125*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][3], 1.0))+(-0.08333333*pow((*j11336k)[j15397k][2], 1.0)*pow((*j11336k)[j15397k][3], 1.0))+(0.1*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][4], 1.0))+(-0.1*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][4], 1.0))+(-0.1666667*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][5], 1.0))+(0.1428571*pow((*j11336k)[j15397k][6], 1.0)); if(j11206k==7) for(unsigned int j15397k = 0; j15397k < (*j11336k).size(); j15397k++ ) j16956k[j15397k]+=(2.480159e-05*pow((*j11336k)[j15397k][0], 8.0))+(-0.0006944444*pow((*j11336k)[j15397k][0], 6.0)*pow((*j11336k)[j15397k][1], 1.0))+(0.005208333*pow((*j11336k)[j15397k][0], 4.0)*pow((*j11336k)[j15397k][1], 2.0))+(-0.01041667*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][1], 3.0))+(0.002604167*pow((*j11336k)[j15397k][1], 4.0))+(0.002777778*pow((*j11336k)[j15397k][0], 5.0)*pow((*j11336k)[j15397k][2], 1.0))+(-0.02777778*pow((*j11336k)[j15397k][0], 3.0)*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][2], 1.0))+(0.04166667*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][1], 2.0)*pow((*j11336k)[j15397k][2], 1.0))+(0.02777778*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][2], 2.0))+(-0.02777778*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][2], 2.0))+(-0.01041667*pow((*j11336k)[j15397k][0], 4.0)*pow((*j11336k)[j15397k][3], 1.0))+(0.0625*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][3], 1.0))+(-0.03125*pow((*j11336k)[j15397k][1], 2.0)*pow((*j11336k)[j15397k][3], 1.0))+(-0.08333333*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][2], 1.0)*pow((*j11336k)[j15397k][3], 1.0))+(0.03125*pow((*j11336k)[j15397k][3], 2.0))+(0.03333333*pow((*j11336k)[j15397k][0], 3.0)*pow((*j11336k)[j15397k][4], 1.0))+(-0.1*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][4], 1.0))+(0.06666667*pow((*j11336k)[j15397k][2], 1.0)*pow((*j11336k)[j15397k][4], 1.0))+(-0.08333333*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][5], 1.0))+(0.08333333*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][5], 1.0))+(0.1428571*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][6], 1.0))+(-0.125*pow((*j11336k)[j15397k][7], 1.0)); if(j11206k==8) for(unsigned int j15397k = 0; j15397k < (*j11336k).size(); j15397k++ ) j16956k[j15397k]+=(2.755732e-06*pow((*j11336k)[j15397k][0], 9.0))+(-9.920635e-05*pow((*j11336k)[j15397k][0], 7.0)*pow((*j11336k)[j15397k][1], 1.0))+(0.001041667*pow((*j11336k)[j15397k][0], 5.0)*pow((*j11336k)[j15397k][1], 2.0))+(-0.003472222*pow((*j11336k)[j15397k][0], 3.0)*pow((*j11336k)[j15397k][1], 3.0))+(0.002604167*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][1], 4.0))+(0.000462963*pow((*j11336k)[j15397k][0], 6.0)*pow((*j11336k)[j15397k][2], 1.0))+(-0.006944444*pow((*j11336k)[j15397k][0], 4.0)*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][2], 1.0))+(0.02083333*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][1], 2.0)*pow((*j11336k)[j15397k][2], 1.0))+(-0.006944444*pow((*j11336k)[j15397k][1], 3.0)*pow((*j11336k)[j15397k][2], 1.0))+(0.009259259*pow((*j11336k)[j15397k][0], 3.0)*pow((*j11336k)[j15397k][2], 2.0))+(-0.02777778*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][2], 2.0))+(0.00617284*pow((*j11336k)[j15397k][2], 3.0))+(-0.002083333*pow((*j11336k)[j15397k][0], 5.0)*pow((*j11336k)[j15397k][3], 1.0))+(0.02083333*pow((*j11336k)[j15397k][0], 3.0)*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][3], 1.0))+(-0.03125*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][1], 2.0)*pow((*j11336k)[j15397k][3], 1.0))+(-0.04166667*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][2], 1.0)*pow((*j11336k)[j15397k][3], 1.0))+(0.04166667*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][2], 1.0)*pow((*j11336k)[j15397k][3], 1.0))+(0.03125*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][3], 2.0))+(0.008333333*pow((*j11336k)[j15397k][0], 4.0)*pow((*j11336k)[j15397k][4], 1.0))+(-0.05*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][4], 1.0))+(0.025*pow((*j11336k)[j15397k][1], 2.0)*pow((*j11336k)[j15397k][4], 1.0))+(0.06666667*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][2], 1.0)*pow((*j11336k)[j15397k][4], 1.0))+(-0.05*pow((*j11336k)[j15397k][3], 1.0)*pow((*j11336k)[j15397k][4], 1.0))+(-0.02777778*pow((*j11336k)[j15397k][0], 3.0)*pow((*j11336k)[j15397k][5], 1.0))+(0.08333333*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][5], 1.0))+(-0.05555556*pow((*j11336k)[j15397k][2], 1.0)*pow((*j11336k)[j15397k][5], 1.0))+(0.07142857*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][6], 1.0))+(-0.07142857*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][6], 1.0))+(-0.125*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][7], 1.0))+(0.1111111*pow((*j11336k)[j15397k][8], 1.0)); if(j11206k==9) for(unsigned int j15397k = 0; j15397k < (*j11336k).size(); j15397k++ ) j16956k[j15397k]+=(2.755732e-07*pow((*j11336k)[j15397k][0], 10.0))+(-1.240079e-05*pow((*j11336k)[j15397k][0], 8.0)*pow((*j11336k)[j15397k][1], 1.0))+(0.0001736111*pow((*j11336k)[j15397k][0], 6.0)*pow((*j11336k)[j15397k][1], 2.0))+(-0.0008680556*pow((*j11336k)[j15397k][0], 4.0)*pow((*j11336k)[j15397k][1], 3.0))+(0.001302083*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][1], 4.0))+(-0.0002604167*pow((*j11336k)[j15397k][1], 5.0))+(6.613757e-05*pow((*j11336k)[j15397k][0], 7.0)*pow((*j11336k)[j15397k][2], 1.0))+(-0.001388889*pow((*j11336k)[j15397k][0], 5.0)*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][2], 1.0))+(0.006944444*pow((*j11336k)[j15397k][0], 3.0)*pow((*j11336k)[j15397k][1], 2.0)*pow((*j11336k)[j15397k][2], 1.0))+(-0.006944444*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][1], 3.0)*pow((*j11336k)[j15397k][2], 1.0))+(0.002314815*pow((*j11336k)[j15397k][0], 4.0)*pow((*j11336k)[j15397k][2], 2.0))+(-0.01388889*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][2], 2.0))+(0.006944444*pow((*j11336k)[j15397k][1], 2.0)*pow((*j11336k)[j15397k][2], 2.0))+(0.00617284*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][2], 3.0))+(-0.0003472222*pow((*j11336k)[j15397k][0], 6.0)*pow((*j11336k)[j15397k][3], 1.0))+(0.005208333*pow((*j11336k)[j15397k][0], 4.0)*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][3], 1.0))+(-0.015625*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][1], 2.0)*pow((*j11336k)[j15397k][3], 1.0))+(0.005208333*pow((*j11336k)[j15397k][1], 3.0)*pow((*j11336k)[j15397k][3], 1.0))+(-0.01388889*pow((*j11336k)[j15397k][0], 3.0)*pow((*j11336k)[j15397k][2], 1.0)*pow((*j11336k)[j15397k][3], 1.0))+(0.04166667*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][2], 1.0)*pow((*j11336k)[j15397k][3], 1.0))+(-0.01388889*pow((*j11336k)[j15397k][2], 2.0)*pow((*j11336k)[j15397k][3], 1.0))+(0.015625*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][3], 2.0))+(-0.015625*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][3], 2.0))+(0.001666667*pow((*j11336k)[j15397k][0], 5.0)*pow((*j11336k)[j15397k][4], 1.0))+(-0.01666667*pow((*j11336k)[j15397k][0], 3.0)*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][4], 1.0))+(0.025*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][1], 2.0)*pow((*j11336k)[j15397k][4], 1.0))+(0.03333333*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][2], 1.0)*pow((*j11336k)[j15397k][4], 1.0))+(-0.03333333*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][2], 1.0)*pow((*j11336k)[j15397k][4], 1.0))+(-0.05*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][3], 1.0)*pow((*j11336k)[j15397k][4], 1.0))+(0.02*pow((*j11336k)[j15397k][4], 2.0))+(-0.006944444*pow((*j11336k)[j15397k][0], 4.0)*pow((*j11336k)[j15397k][5], 1.0))+(0.04166667*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][5], 1.0))+(-0.02083333*pow((*j11336k)[j15397k][1], 2.0)*pow((*j11336k)[j15397k][5], 1.0))+(-0.05555556*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][2], 1.0)*pow((*j11336k)[j15397k][5], 1.0))+(0.04166667*pow((*j11336k)[j15397k][3], 1.0)*pow((*j11336k)[j15397k][5], 1.0))+(0.02380952*pow((*j11336k)[j15397k][0], 3.0)*pow((*j11336k)[j15397k][6], 1.0))+(-0.07142857*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][6], 1.0))+(0.04761905*pow((*j11336k)[j15397k][2], 1.0)*pow((*j11336k)[j15397k][6], 1.0))+(-0.0625*pow((*j11336k)[j15397k][0], 2.0)*pow((*j11336k)[j15397k][7], 1.0))+(0.0625*pow((*j11336k)[j15397k][1], 1.0)*pow((*j11336k)[j15397k][7], 1.0))+(0.1111111*pow((*j11336k)[j15397k][0], 1.0)*pow((*j11336k)[j15397k][8], 1.0))+(-0.1*pow((*j11336k)[j15397k][9], 1.0)); } } if(j11058k){ for(int j15397k=0;j15397k<j16917k;j15397k++) { if(j16956k[j15397k]>j13741k) j16956k[j15397k]=j13741k; if(j16956k[j15397k]<j17945k) j16956k[j15397k]=j17945k; } } return (j16956k); }
